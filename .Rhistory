ggplot(data, aes(x = is_wall, y = ReadsDeduped + 1, fill = Family)) +
geom_boxplot(width = 0.7, alpha = 0.7) +
stat_summary(fun = median, geom = "point", shape = 18, size = 3, color = "black") +
scale_y_log10(labels = scales::comma) +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
labs(title = title, x = x_label, y = "ReadsDeduped (log10 scale)")
# Entfernen Sie die Zeile theme(legend.position = "none")
}
## Creating the four separate plots
plot_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Canidae"],
"Dog Office: Canidae",
"Sample Location"
)
plot_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Hominidae"],
"Dog Office: Hominidae",
"Sample Location"
)
plot_non_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Canidae"],
"Non-Dog Location: Canidae",
"Sample Location"
)
plot_non_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae"],
"Non-Dog Location: Hominidae",
"Sample Location"
)
#dummy legend for all plots
legend_plot <- ggplot(data.frame(Family = c("Canidae", "Hominidae")), aes(x = 1, y = 1, fill = Family)) +
geom_point() +
scale_fill_manual(values = custom_colors, labels = c("Canidae (Dogs)", "Hominidae (Humans)")) +
theme_minimal() +
theme(legend.position = "bottom")
shared_legend <- get_legend(legend_plot)
get_legend <- function(plot) {
legends <- ggplot2::get_plot_component(plot, "guide-box", return_all = TRUE)
non_empty <- !vapply(legends, inherits, what = "zeroGrob", FUN.VALUE = logical(1))
if (any(non_empty)) {
return(legends[[which(non_empty)[1]]])
} else {
return(NULL)
}
}
# Verwenden Sie diese Funktion anstelle von cowplot::get_legend
shared_legend <- get_legend(legend_plot)
shared_legend <- get_legend(legend_plot)
#dummy legend for all plots
legend_plot <- ggplot(data.frame(Family = c("Canidae", "Hominidae")), aes(x = 1, y = 1, fill = Family)) +
geom_point() +
scale_fill_manual(values = custom_colors, labels = c("Canidae (Dogs)", "Hominidae (Humans)")) +
theme_minimal() +
theme(legend.position = "bottom")
library(data.table)
library(ggplot2)
library(gridExtra)
library(cowplot)
## Set working directory
setwd("~/github/mpi_dogs/")
## Read in the txt file with dog office and category information
dt.dog_office <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
## Read in the tsv file with the quicksand data for all samples
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
## Merge dt.tax with dt.dog_office to include category information
dt.tax_filtered <- merge(dt.tax, dt.dog_office[, .(sample_id, category, category2, office)], by="sample_id", all.x=TRUE)
## Filter for only Hominidae and Canidae families
relevant_families <- c('Hominidae', 'Canidae')
dt.tax_filtered <- dt.tax_filtered[Family %in% relevant_families]
## Add wall information, treating empty categories as "No Wall"
dt.tax_filtered[, `:=`(
is_wall = ifelse(category == "wall", "Wall", "No Wall")
)]
dt.tax_filtered[is.na(is_wall) | is_wall == "", is_wall := "No Wall"]
## Define offices to exclude
offices_to_exclude <- c("NC", "Mimi/Linda Hallway", "Tracy/Silke Hallway", "Main Entrance")
## Filter out the excluded offices
dt.tax_filtered <- dt.tax_filtered[!office %in% offices_to_exclude]
## Define custom color scheme
custom_colors <- c("Canidae" = "#35978f", "Hominidae" = "#fed976")
## Function to create a single boxplot with custom colors
create_single_boxplot <- function(data, title, x_label) {
ggplot(data, aes(x = is_wall, y = ReadsDeduped + 1, fill = Family)) +
geom_boxplot(width = 0.7, alpha = 0.7) +
stat_summary(fun = median, geom = "point", shape = 18, size = 3, color = "black") +
scale_y_log10(labels = scales::comma) +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
labs(title = title, x = x_label, y = "ReadsDeduped (log10 scale)")
# Entfernen Sie die Zeile theme(legend.position = "none")
}
## Creating the four separate plots
plot_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Canidae"],
"Dog Office: Canidae",
"Sample Location"
)
plot_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Hominidae"],
"Dog Office: Hominidae",
"Sample Location"
)
plot_non_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Canidae"],
"Non-Dog Location: Canidae",
"Sample Location"
)
plot_non_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae"],
"Non-Dog Location: Hominidae",
"Sample Location"
)
#dummy legend for all plots
legend_plot <- ggplot(data.frame(Family = c("Canidae", "Hominidae")), aes(x = 1, y = 1, fill = Family)) +
geom_point() +
scale_fill_manual(values = custom_colors, labels = c("Canidae (Dogs)", "Hominidae (Humans)")) +
theme_minimal() +
theme(legend.position = "bottom")
get_legend <- function(plot) {
legends <- ggplot2::get_plot_component(plot, "guide-box", return_all = TRUE)
non_empty <- !vapply(legends, inherits, what = "zeroGrob", FUN.VALUE = logical(1))
if (any(non_empty)) {
return(legends[[which(non_empty)[1]]])
} else {
return(NULL)
}
}
shared_legend <- get_legend(legend_plot)
get_legend <- function(plot) {
plot_build <- ggplot_build(plot)
plot_table <- plot_build$layout$layout
legend_index <- which(grepl("guide-box", plot_table$name))
if (length(legend_index) > 0) {
legend <- plot_build$grobs[[legend_index]]
return(legend)
} else {
return(NULL)
}
}
shared_legend <- get_legend(legend_plot)
combined_plots <- plot_grid(
plot_dog_office_canidae + theme(legend.position = "none"),
plot_non_dog_office_canidae + theme(legend.position = "none"),
plot_dog_office_hominidae + theme(legend.position = "none"),
plot_non_dog_office_hominidae + theme(legend.position = "none"),
ncol = 2
)
## Arrange plots without legends
final_plot <- plot_grid(
combined_plots,
shared_legend,
ncol = 1,
rel_heights = c(1, 0.1)
)
print(final_plot)
library(data.table)
library(ggplot2)
library(gridExtra)
library(cowplot)
## Set working directory
setwd("~/github/mpi_dogs/")
## Read in the txt file with dog office and category information
dt.dog_office <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
## Read in the tsv file with the quicksand data for all samples
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
## Merge dt.tax with dt.dog_office to include category information
dt.tax_filtered <- merge(dt.tax, dt.dog_office[, .(sample_id, category, category2, office)], by="sample_id", all.x=TRUE)
## Filter for only Hominidae and Canidae families
relevant_families <- c('Hominidae', 'Canidae')
dt.tax_filtered <- dt.tax_filtered[Family %in% relevant_families]
## Add wall information, treating empty categories as "No Wall"
dt.tax_filtered[, `:=`(
is_wall = ifelse(category == "wall", "Wall", "No Wall")
)]
dt.tax_filtered[is.na(is_wall) | is_wall == "", is_wall := "No Wall"]
## Define offices to exclude
offices_to_exclude <- c("NC", "Mimi/Linda Hallway", "Tracy/Silke Hallway", "Main Entrance")
## Filter out the excluded offices
dt.tax_filtered <- dt.tax_filtered[!office %in% offices_to_exclude]
## Define custom color scheme
custom_colors <- c("Canidae" = "#35978f", "Hominidae" = "#fed976")
## Function to create a single boxplot with custom colors
create_single_boxplot <- function(data, title, x_label) {
ggplot(data, aes(x = is_wall, y = ReadsDeduped + 1, fill = Family)) +
geom_boxplot(width = 0.7, alpha = 0.7) +
stat_summary(fun = median, geom = "point", shape = 18, size = 3, color = "black") +
scale_y_log10(labels = scales::comma) +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
labs(title = title, x = x_label, y = "ReadsDeduped (log10 scale)")
# Entfernen Sie die Zeile theme(legend.position = "none")
}
## Creating the four separate plots
plot_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Canidae"],
"Dog Office: Canidae",
"Sample Location"
)
plot_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Hominidae"],
"Dog Office: Hominidae",
"Sample Location"
)
plot_non_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Canidae"],
"Non-Dog Location: Canidae",
"Sample Location"
)
plot_non_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae"],
"Non-Dog Location: Hominidae",
"Sample Location"
)
#dummy legend for all plots
legend_plot <- ggplot(data.frame(Family = c("Canidae", "Hominidae")), aes(x = 1, y = 1, fill = Family)) +
geom_point() +
scale_fill_manual(values = custom_colors, labels = c("Canidae (Dogs)", "Hominidae (Humans)")) +
theme_minimal() +
theme(legend.position = "bottom")
get_legend <- function(plot) {
plot_build <- ggplot_build(plot)
plot_table <- plot_build$layout$layout
legend_index <- which(grepl("guide-box", plot_table$name))
if (length(legend_index) > 0) {
legend <- plot_build$grobs[[legend_index]]
return(legend)
} else {
return(NULL)
}
}
shared_legend <- get_legend(legend_plot)
combined_plots <- plot_grid(
plot_dog_office_canidae + theme(legend.position = "none"),
plot_non_dog_office_canidae + theme(legend.position = "none"),
plot_dog_office_hominidae + theme(legend.position = "none"),
plot_non_dog_office_hominidae + theme(legend.position = "none"),
ncol = 2
)
## Arrange plots without legends
final_plot <- plot_grid(
combined_plots,
shared_legend,
ncol = 1,
rel_heights = c(1, 0.1)
)
print(final_plot)
library(data.table)
library(ggplot2)
library(gridExtra)
library(cowplot)
## Set working directory
setwd("~/github/mpi_dogs/")
## Read in the txt file with dog office and category information
dt.dog_office <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
## Read in the tsv file with the quicksand data for all samples
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
## Merge dt.tax with dt.dog_office to include category information
dt.tax_filtered <- merge(dt.tax, dt.dog_office[, .(sample_id, category, category2, office)], by="sample_id", all.x=TRUE)
## Filter for only Hominidae and Canidae families
relevant_families <- c('Hominidae', 'Canidae')
dt.tax_filtered <- dt.tax_filtered[Family %in% relevant_families]
## Add wall information, treating empty categories as "No Wall"
dt.tax_filtered[, `:=`(
is_wall = ifelse(category == "wall", "Wall", "No Wall")
)]
dt.tax_filtered[is.na(is_wall) | is_wall == "", is_wall := "No Wall"]
## Define offices to exclude
offices_to_exclude <- c("NC", "Mimi/Linda Hallway", "Tracy/Silke Hallway", "Main Entrance")
## Filter out the excluded offices
dt.tax_filtered <- dt.tax_filtered[!office %in% offices_to_exclude]
## Define custom color scheme
custom_colors <- c("Canidae" = "#35978f", "Hominidae" = "#fed976")
## Function to create a single boxplot with custom colors
create_single_boxplot <- function(data, title, x_label) {
ggplot(data, aes(x = is_wall, y = ReadsDeduped + 1, fill = Family)) +
geom_boxplot(width = 0.7, alpha = 0.7) +
stat_summary(fun = median, geom = "point", shape = 18, size = 3, color = "black") +
scale_y_log10(labels = scales::comma) +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
labs(title = title, x = x_label, y = "ReadsDeduped (log10 scale)")
}
## Creating the four separate plots
plot_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Canidae"],
"Dog Office: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Hominidae"],
"Dog Office: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Canidae"],
"Non-Dog Location: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae"],
"Non-Dog Location: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
## Combine plots
combined_plots <- plot_grid(
plot_dog_office_canidae,
plot_non_dog_office_canidae,
plot_dog_office_hominidae,
plot_non_dog_office_hominidae,
ncol = 2
)
print(combined_plots)
## Saving the combined plot
ggsave("figures/walls_vs_no_walls.png", final_plot, width = 16, height = 16)
## Saving the combined plot
ggsave("figures/walls_vs_no_walls.png", combined_plots, width = 16, height = 16)
## Function to calculate median for each group
calculate_median <- function(data, category, family) {
wall_median <- data[category2 == category & Family == family & is_wall == "Wall", median(ReadsDeduped)]
no_wall_median <- data[category2 == category & Family == family & is_wall == "No Wall", median(ReadsDeduped)]
return(c(wall_median, no_wall_median))
}
## Calculate medians for each group
dog_office_canidae_medians <- calculate_median(dt.tax_filtered, "dog_office", "Canidae")
dog_office_hominidae_medians <- calculate_median(dt.tax_filtered, "dog_office", "Hominidae")
non_dog_office_canidae_medians <- calculate_median(dt.tax_filtered, category2 != "dog_office", "Canidae")
non_dog_office_hominidae_medians <- calculate_median(dt.tax_filtered, category2 != "dog_office", "Hominidae")
## Combine medians for paired t-test
wall_medians <- c(dog_office_canidae_medians[1], dog_office_hominidae_medians[1],
non_dog_office_canidae_medians[1], non_dog_office_hominidae_medians[1])
no_wall_medians <- c(dog_office_canidae_medians[2], dog_office_hominidae_medians[2],
non_dog_office_canidae_medians[2], non_dog_office_hominidae_medians[2])
## Perform paired t-test
t_test_result <- t.test(wall_medians, no_wall_medians, paired = TRUE)
## Perform paired t-test
wilcox_test_result <- wilcox.test(wall_medians, no_wall_medians, paired = TRUE)
# Canidae in Dog_office
canidae_dog_office_wall <- dt.tax_filtered[category2 == "dog_office" & Family == "Canidae" & is_wall == "Wall", ReadsDeduped]
canidae_dog_office_no_wall <- dt.tax_filtered[category2 == "dog_office" & Family == "Canidae" & is_wall == "No Wall", ReadsDeduped]
# Hominidae in Dog_office
hominidae_dog_office_wall <- dt.tax_filtered[category2 == "dog_office" & Family == "Hominidae" & is_wall == "Wall", ReadsDeduped]
hominidae_dog_office_no_wall <- dt.tax_filtered[category2 == "dog_office" & Family == "Hominidae" & is_wall == "No Wall", ReadsDeduped]
# Canidae in Non Dog_office
canidae_non_dog_office_wall <- dt.tax_filtered[category2 != "dog_office" & Family == "Canidae" & is_wall == "Wall", ReadsDeduped]
canidae_non_dog_office_no_wall <- dt.tax_filtered[category2 != "dog_office" & Family == "Canidae" & is_wall == "No Wall", ReadsDeduped]
# Hominidae in Non Dog_office
hominidae_non_dog_office_wall <- dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae" & is_wall == "Wall", ReadsDeduped]
hominidae_non_dog_office_no_wall <- dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae" & is_wall == "No Wall", ReadsDeduped]
t_test_canidae_dog_office <- t.test(canidae_dog_office_wall, canidae_dog_office_no_wall)
t_test_canidae_dog_office
t_test_hominidae_dog_office <- t.test(hominidae_dog_office_wall, hominidae_dog_office_no_wall)
t_test_canidae_non_dog_office <- t.test(canidae_non_dog_office_wall, canidae_non_dog_office_no_wall)
t_test_hominidae_non_dog_office <- t.test(hominidae_non_dog_office_wall, hominidae_non_dog_office_no_wall)
print(t_test_canidae_dog_office)
print(t_test_hominidae_dog_office)
print(t_test_canidae_non_dog_office)
# Data walls vs not wall
wall_data <- dt.tax_filtered[is_wall == "Wall", ReadsDeduped]
no_wall_data <- dt.tax_filtered[is_wall == "No Wall", ReadsDeduped]
print(unique(dt.tax_filtered$Family))
t_test_result <- t.test(wall_data, no_wall_data)
# Data walls vs not wall
wall_data <- dt.tax_filtered[is_wall == "Wall", ReadsDeduped]
no_wall_data <- dt.tax_filtered[is_wall == "No Wall", ReadsDeduped]
t_test_result <- t.test(wall_data, no_wall_data)
print(t_test_result)
library(data.table)
library(ggplot2)
library(gridExtra)
library(cowplot)
## Set working directory
setwd("~/github/mpi_dogs/")
## Read in the txt file with dog office and category information
dt.dog_office <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
## Read in the tsv file with the quicksand data for all samples
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
## Merge dt.tax with dt.dog_office to include category information
dt.tax_filtered <- merge(dt.tax, dt.dog_office[, .(sample_id, category, category2, office)], by="sample_id", all.x=TRUE)
## Filter for only Hominidae and Canidae families
relevant_families <- c('Hominidae', 'Canidae')
dt.tax_filtered <- dt.tax_filtered[Family %in% relevant_families]
## Add wall information, treating empty categories as "No Wall"
dt.tax_filtered[, `:=`(
is_wall = ifelse(category == "wall", "Wall", "No Wall")
)]
dt.tax_filtered[is.na(is_wall) | is_wall == "", is_wall := "No Wall"]
## Define offices to exclude
offices_to_exclude <- c("NC", "Mimi/Linda Hallway", "Tracy/Silke Hallway", "Main Entrance")
## Filter out the excluded offices
dt.tax_filtered <- dt.tax_filtered[!office %in% offices_to_exclude]
## Define custom color scheme
custom_colors <- c("Canidae" = "#35978f", "Hominidae" = "#fed976")
## Function to create a single boxplot with custom colors
create_single_boxplot <- function(data, title, x_label) {
ggplot(data, aes(x = is_wall, y = ReadsDeduped + 1, fill = Family)) +
geom_boxplot(width = 0.7, alpha = 0.7) +
stat_summary(fun = median, geom = "point", shape = 18, size = 3, color = "black") +
scale_y_log10(labels = scales::comma) +
scale_fill_manual(values = custom_colors) +
theme_bw() +
labs(title = title, x = x_label, y = "ReadsDeduped (log10 scale)")
}
## Creating the four separate plots
plot_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Canidae"],
"Dog Office: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Hominidae"],
"Dog Office: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Canidae"],
"Non-Dog Location: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae"],
"Non-Dog Location: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
## Combine plots
combined_plots <- plot_grid(
plot_dog_office_canidae,
plot_non_dog_office_canidae,
plot_dog_office_hominidae,
plot_non_dog_office_hominidae,
ncol = 2
)
print(combined_plots)
plot_non_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae"],
"Non-Dog Location: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
library(data.table)
library(ggplot2)
library(gridExtra)
library(cowplot)
## Set working directory
setwd("~/github/mpi_dogs/")
## Read in the txt file with dog office and category information
dt.dog_office <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
## Read in the tsv file with the quicksand data for all samples
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
## Merge dt.tax with dt.dog_office to include category information
dt.tax_filtered <- merge(dt.tax, dt.dog_office[, .(sample_id, category, category2, office)], by="sample_id", all.x=TRUE)
## Filter for only Hominidae and Canidae families
relevant_families <- c('Hominidae', 'Canidae')
dt.tax_filtered <- dt.tax_filtered[Family %in% relevant_families]
## Add wall information, treating empty categories as "No Wall"
dt.tax_filtered[, `:=`(
is_wall = ifelse(category == "wall", "Wall", "No Wall")
)]
dt.tax_filtered[is.na(is_wall) | is_wall == "", is_wall := "No Wall"]
## Define offices to exclude
offices_to_exclude <- c("NC", "Mimi/Linda Hallway", "Tracy/Silke Hallway", "Main Entrance")
## Filter out the excluded offices
dt.tax_filtered <- dt.tax_filtered[!office %in% offices_to_exclude]
## Define custom color scheme
custom_colors <- c("Canidae" = "#35978f", "Hominidae" = "#fed976")
## Function to create a single boxplot with custom colors
create_single_boxplot <- function(data, title, x_label) {
ggplot(data, aes(x = is_wall, y = ReadsDeduped + 1, fill = Family)) +
geom_boxplot(width = 0.7, alpha = 0.7) +
stat_summary(fun = median, geom = "point", shape = 18, size = 3, color = "black") +
scale_y_log10(labels = scales::comma) +
scale_fill_manual(values = custom_colors) +
theme_bw() +
labs(title = title, x = x_label, y = "ReadsDeduped (log10 scale)")
}
## Creating the four separate plots
plot_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Canidae"],
"Dog Office: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Hominidae"],
"Dog Office: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Canidae"],
"Non-Dog Location: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae"],
"Non-Dog Location: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
## Combine plots
combined_plots <- plot_grid(
plot_dog_office_canidae,
plot_non_dog_office_canidae,
plot_dog_office_hominidae,
plot_non_dog_office_hominidae,
ncol = 2
)
print(combined_plots)
## Saving the combined plot
ggsave("figures/walls_vs_no_walls.png", combined_plots, width = 16, height = 16)
## T-Test
# Data walls vs not wall
wall_data <- dt.tax_filtered[is_wall == "Wall", ReadsDeduped]
no_wall_data <- dt.tax_filtered[is_wall == "No Wall", ReadsDeduped]
t_test_result <- t.test(wall_data, no_wall_data)
print(t_test_result)
