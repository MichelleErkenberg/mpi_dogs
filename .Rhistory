library(data.table)
library(ggplot2)
setwd("~/github/mpi_dogs/")
## Read in the sample sheet
dt.samples <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
setnames(dt.samples, 'dog', 'dogs_in_office')
## TAXONOMIC GROUPS found in each sample
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
setnames(dt.tax, 'dog', 'dogs_in_office')
## CLEAN TAXONOMIC GROUPS - make a table where every sample is listed four times, one for each Family
dt.cj_samples <- CJ(Family = c('Hominidae', 'Canidae', 'Felidae', 'Suidae'),
sample_id = unique(dt.tax$sample_id))
## CLEAN TAXONOMIC GROUPS - make a table where every sample is listed four times, one for each Family
dt.cj_samples <- CJ(Family = c('Hominidae', 'Canidae', 'Felidae', 'Suidae'),
sample_id = unique(dt.tax$sample_id))
library(data.table)
library(ggplot2)
setwd("~/github/mpi_dogs/")
## Read in the sample sheet
dt.samples <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
setnames(dt.samples, 'dog', 'dogs_in_office')
## TAXONOMIC GROUPS found in each sample
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
## CLEAN TAXONOMIC GROUPS - make a table where every sample is listed four times, one for each Family
dt.cj_samples <- CJ(Family = c('Hominidae', 'Canidae', 'Felidae', 'Suidae'),
sample_id = unique(dt.tax$sample_id))
dt.cj_samples <- merge(dt.cj_samples, unique(dt.tax[, .(sample_id, ReadsRaw)]),
by = 'sample_id')
dt.tax.clean <- merge(dt.tax[, .(sample_id, ReadsDeduped, Family)],
dt.cj_samples,
allow.cartesian = T,
all.y=T, by=c('Family', 'sample_id'))
dt.tax.clean[is.na(ReadsDeduped), ReadsDeduped := 0]
dt.tax.clean <- merge(dt.tax.clean, dt.samples, by='sample_id', all=T)
dt.tax.clean[is.na(y), y := 0]
dt.tax.clean[, ReadsDeduped.cap := ReadsDeduped]
dt.tax.clean[ReadsDeduped > 100000, ReadsDeduped.cap := 20000]
library(data.table)
library(ggplot2)
## Set working directory
setwd("~/github/mpi_dogs/")
## Read in the txt file to later define whether it is a dog office or not
dt.dog_office <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
## Read in the tsv file with the quicksand data for all samples (e.g. Family, ReadsDeduped ...)
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
## Create a cross join with predefined families and unique sample IDs
dt.cj_samples <- CJ(Family = c('Hominidae', 'Canidae', 'Felidae', 'Suidae'),
sample_id = unique(dt.tax$sample_id))
## Merge cross join with raw read counts
dt.cj_samples.merge <- merge(dt.cj_samples, unique(dt.tax[, .(sample_id, ReadsRaw)]),
by = 'sample_id')
## Merge taxonomic data with cross join, allowing cartesian product
dt.merge <- merge(dt.tax[, .(sample_id, ReadsDeduped, Family)],
dt.cj_samples,
allow.cartesian = T,
all.y=T, by=c('Family', 'sample_id'))
## Replace NA values with 0 in ReadsDeduped
dt.merge[is.na(ReadsDeduped), ReadsDeduped := 0]
## Merge with dog office information
dt.merge <- merge(dt.merge, dt.dog_office[, .(sample_id, dog_office)], by='sample_id', all.x=T)
## Merge with dog office information
dt.merge <- merge(dt.merge, dt.dog_office[, .(sample_id, category2)], by='sample_id', all.x=T)
## Create a boolean column for dog_office
dt.merge[, is_dog_office := category == "dog_office"]
## Create a boolean column for dog_office
dt.merge[, is_dog_office := category2 == "dog_office"]
## Cap ReadsDeduped at 100,000 to manage extreme values
dt.merge[ReadsDeduped > 100000, ReadsDeduped := 100000]
## Count unique samples per family and dog office status
dt.count <- dt.merge[, .(count = uniqueN(sample_id)), by = .(Family, dog_office)]
## Count unique samples per family and dog office status
dt.count <- dt.merge[, .(count = uniqueN(sample_id)), by = .(Family, category2)]
## Plot: Total samples per family
ggplot(dt.count[, .(count = sum(count)), by = Family], aes(x = Family, y = count, fill = Family)) +
geom_bar(stat = "identity") +
geom_text(aes(label = count), vjust = -0.3) +
theme_minimal() +
labs(title = "Number of Samples per Family",
x = "Family", y = "Number of Samples")
ggsave("all_samples_count.png", width = 10, height = 6)
## Plot: Dog office samples per family
ggplot(dt.count[dog_office == TRUE], aes(x = Family, y = count, fill = Family)) +
geom_bar(stat = "identity") +
geom_text(aes(label = count), vjust = -0.3) +
theme_minimal() +
labs(title = "Number of Dog Office Samples per Family",
x = "Family", y = "Number of Samples")
## Plot: Dog office samples per family
ggplot(dt.count[is_dog_office == TRUE], aes(x = Family, y = count, fill = Family)) +
geom_bar(stat = "identity") +
geom_text(aes(label = count), vjust = -0.3) +
theme_minimal() +
labs(title = "Number of Dog Office Samples per Family",
x = "Family", y = "Number of Samples")
library(data.table)
library(ggplot2)
library(gridExtra)
## Set working directory
setwd("~/github/mpi_dogs/")
## Read in the txt file to later define whether it is a dog office or not
dt.dog_office <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
## Read in the tsv file with the quicksand data for all samples (e.g. Family, ReadsDeduped ...)
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
## Create a cross join with predefined families and unique sample IDs
dt.cj_samples <- CJ(Family = c('Hominidae', 'Canidae', 'Felidae', 'Suidae'),
sample_id = unique(dt.tax$sample_id))
## Merge taxonomic data with cross join, allowing cartesian product
dt.merge <- merge(dt.tax[, .(sample_id, ReadsDeduped, Family)],
dt.cj_samples,
allow.cartesian = T,
all.y=T, by=c('Family', 'sample_id'))
## Replace NA values with 0 in ReadsDeduped
dt.merge[is.na(ReadsDeduped), ReadsDeduped := 0]
## Merge with dog office information
dt.merge <- merge(dt.merge, dt.dog_office[, .(sample_id, category)], by='sample_id', all.x=T)
## Create a boolean column for dog_office
dt.merge[, is_dog_office := category == "dog_office"]
## Cap ReadsDeduped at 20,000 for values over 100,000
dt.merge[, ReadsDeduped.cap := ReadsDeduped]
dt.merge[ReadsDeduped > 100000, ReadsDeduped.cap := 20000]
## Count unique samples per family and dog office status
dt.count <- dt.merge[, .(count = uniqueN(sample_id)), by = .(Family, is_dog_office)]
## Create plot function
create_plot <- function(data, title) {
ggplot(data, aes(x = Family, y = count, fill = Family)) +
geom_bar(stat = "identity") +
geom_text(aes(label = count), vjust = -0.3) +
theme_minimal() +
labs(title = title, x = "Family", y = "Number of Samples") +
theme(legend.position = "none")  # Remove legend for cleaner side-by-side view
}
## Create plots
plot_dog_office <- create_plot(dt.count[is_dog_office == TRUE], "Dog Office Samples")
plot_non_dog_office <- create_plot(dt.count[is_dog_office == FALSE], "Non-Dog Office Samples")
## Combine plots side by side
combined_plot <- grid.arrange(plot_dog_office, plot_non_dog_office, ncol = 2)
library(data.table)
library(ggplot2)
library(gridExtra)
## Set working directory
setwd("~/github/mpi_dogs/")
## Read in the txt file to define whether it is a dog office or not
dt.dog_office <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
## Read in the tsv file with the quicksand data for all samples
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
## Merge dog office information with tax data
dt.merged <- merge(dt.tax, dt.dog_office[, .(sample_id, category)], by="sample_id", all.x=TRUE)
## Create a boolean column for dog_office
dt.merged[, is_dog_office := category == "dog_office"]
## Filter for relevant families and apply threshold
relevant_families <- c('Hominidae', 'Canidae', 'Felidae', 'Suidae')
threshold <- 100  # Set your desired threshold here
dt.filtered <- dt.merged[Family %in% relevant_families & ReadsDeduped > threshold]
## Count occurrences for each family, split by dog_office status
dt.count <- dt.filtered[, .(count = .N), by = .(Family, is_dog_office)]
## Create plot function
create_plot <- function(data, title) {
ggplot(data, aes(x = Family, y = count, fill = Family)) +
geom_bar(stat = "identity") +
geom_text(aes(label = count), vjust = -0.3) +
theme_minimal() +
labs(title = title, x = "Family", y = "Number of Samples") +
theme(legend.position = "none")
}
## Create plots
plot_dog_office <- create_plot(dt.count[is_dog_office == TRUE], "Dog Office Samples")
plot_non_dog_office <- create_plot(dt.count[is_dog_office == FALSE], "Non-Dog Office Samples")
## Combine plots side by side
combined_plot <- grid.arrange(plot_dog_office, plot_non_dog_office, ncol = 2)
## Print summary
print(dt.count)
library(data.table)
library(ggplot2)
library(gridExtra)
## Set working directory
setwd("~/github/mpi_dogs/")
## Read in the txt file to define whether it is a dog office or not
dt.dog_office <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
## Read in the tsv file with the quicksand data for all samples
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
## Split dog_office data
dog_office_samples <- dt.dog_office[category == "dog_office", sample_id]
non_dog_office_samples <- dt.dog_office[category != "dog_office", sample_id]
## Filter tax data for dog_office and non_dog_office samples
dt.tax_dog_office <- dt.tax[sample_id %in% dog_office_samples]
dt.tax_non_dog_office <- dt.tax[sample_id %in% non_dog_office_samples]
## Split dog_office data
dog_office_samples <- dt.dog_office[category2 == "dog_office", sample_id]
non_dog_office_samples <- dt.dog_office[category2 != "dog_office", sample_id]
## Filter tax data for dog_office and non_dog_office samples
dt.tax_dog_office <- dt.tax[sample_id %in% dog_office_samples]
dt.tax_non_dog_office <- dt.tax[sample_id %in% non_dog_office_samples]
## Function to process data
process_data <- function(dt, relevant_families, threshold) {
dt <- dt[Family %in% relevant_families & ReadsDeduped > threshold]
dt[, .(count = uniqueN(sample_id)), by = Family]
}
## Set parameters
relevant_families <- c('Hominidae', 'Canidae', 'Felidae', 'Suidae')
threshold <- 100  # Set your desired threshold here
## Process data
dt.count_dog_office <- process_data(dt.tax_dog_office, relevant_families, threshold)
dt.count_non_dog_office <- process_data(dt.tax_non_dog_office, relevant_families, threshold)
## Create plot function
create_plot <- function(data, title) {
ggplot(data, aes(x = Family, y = count, fill = Family)) +
geom_bar(stat = "identity") +
geom_text(aes(label = count), vjust = -0.3) +
theme_minimal() +
labs(title = title, x = "Family", y = "Number of Samples") +
theme(legend.position = "none")
}
## Create plots
plot_dog_office <- create_plot(dt.count_dog_office, "Dog Office Samples")
plot_non_dog_office <- create_plot(dt.count_non_dog_office, "Non-Dog Office Samples")
## Combine plots side by side
combined_plot <- grid.arrange(plot_dog_office, plot_non_dog_office, ncol = 2)
## Save combined plot
ggsave("figures/combined_samples_count.png", combined_plot, width = 16, height = 8)
## Print summaries
print("Dog Office Samples:")
print(dt.count_dog_office)
print("Non-Dog Office Samples:")
print(dt.count_non_dog_office)
library(data.table)
library(ggplot2)
library(gridExtra)
## Set working directory
setwd("~/github/mpi_dogs/")
## Read in the txt file to define whether it is a dog office or not
dt.dog_office <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
## Read in the tsv file with the quicksand data for all samples
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
## Split dog_office data
dog_office_samples <- dt.dog_office[category2 == "dog_office", sample_id]
non_dog_office_samples <- dt.dog_office[category2 != "dog_office", sample_id]
## Filter tax data for dog_office and non_dog_office samples
dt.tax_dog_office <- dt.tax[sample_id %in% dog_office_samples]
dt.tax_non_dog_office <- dt.tax[sample_id %in% non_dog_office_samples]
## Function to process data for bar plots
process_data <- function(dt, relevant_families, threshold) {
dt <- dt[Family %in% relevant_families & ReadsDeduped > threshold]
dt[, .(count = uniqueN(sample_id)), by = Family]
}
## Function to process data for pie charts
process_data_pie <- function(dt, relevant_families) {
dt <- dt[Family %in% relevant_families]
dt[, .(ReadsFiltered = sum(ReadsFiltered)), by = Family]
}
## Set parameters
relevant_families <- c('Hominidae', 'Canidae', 'Felidae', 'Suidae')
threshold <- 100  # Set your desired threshold here
## Process data for bar plots
dt.count_dog_office <- process_data(dt.tax_dog_office, relevant_families, threshold)
dt.count_non_dog_office <- process_data(dt.tax_non_dog_office, relevant_families, threshold)
library(data.table)
library(ggplot2)
library(gridExtra)
## Set working directory
setwd("~/github/mpi_dogs/")
## Read in the txt file to define whether it is a dog office or not
dt.dog_office <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
## Read in the tsv file with the quicksand data for all samples
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
## Apply the cap to ReadsDeduped
dt.tax[, ReadsDeduped.cap := pmin(ReadsDeduped, 20000)]
## Split dog_office data
dog_office_samples <- dt.dog_office[category2 == "dog_office", sample_id]
non_dog_office_samples <- dt.dog_office[category2 != "dog_office", sample_id]
## Filter tax data for dog_office and non_dog_office samples
dt.tax_dog_office <- dt.tax[sample_id %in% dog_office_samples]
dt.tax_non_dog_office <- dt.tax[sample_id %in% non_dog_office_samples]
## Function to process data for bar plots
process_data <- function(dt, relevant_families, threshold) {
dt <- dt[Family %in% relevant_families & ReadsDeduped.cap > threshold]
dt[, .(count = uniqueN(sample_id)), by = Family]
}
## Function to process data for pie charts
process_data_pie <- function(dt, relevant_families) {
dt <- dt[Family %in% relevant_families]
dt[, .(ReadsFiltered = sum(ReadsFiltered)), by = Family]
}
## Set parameters
relevant_families <- c('Hominidae', 'Canidae', 'Felidae', 'Suidae')
## Process data for bar plots
dt.count_dog_office <- process_data(dt.tax_dog_office, relevant_families, threshold)
dt.count_non_dog_office <- process_data(dt.tax_non_dog_office, relevant_families, threshold)
## Process data for pie charts
dt.pie_dog_office <- process_data_pie(dt.tax_dog_office, relevant_families)
dt.pie_non_dog_office <- process_data_pie(dt.tax_non_dog_office, relevant_families)
## Create bar plot function
create_plot <- function(data, title) {
ggplot(data, aes(x = Family, y = count, fill = Family)) +
geom_bar(stat = "identity") +
geom_text(aes(label = count), vjust = -0.3) +
theme_minimal() +
labs(title = title, x = "Family", y = "Number of Samples") +
theme(legend.position = "none")
}
## Create pie chart function
create_pie_chart <- function(data, title) {
ggplot(data, aes(x = "", y = ReadsFiltered, fill = Family)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
labs(title = title) +
geom_text(aes(label = paste0(round(ReadsFiltered/sum(ReadsFiltered)*100, 1), "%")),
position = position_stack(vjust = 0.5))
}
## Create plots
plot_dog_office <- create_plot(dt.count_dog_office, "Dog Office Samples")
plot_non_dog_office <- create_plot(dt.count_non_dog_office, "Non-Dog Office Samples")
pie_dog_office <- create_pie_chart(dt.pie_dog_office, "Dog Office ReadsFiltered")
pie_non_dog_office <- create_pie_chart(dt.pie_non_dog_office, "Non-Dog Office ReadsFiltered")
## Combine all plots
combined_plot <- grid.arrange(
plot_dog_office, plot_non_dog_office,
pie_dog_office, pie_non_dog_office,
ncol = 2
)
library(data.table)
library(ggplot2)
library(gridExtra)
## Set working directory
setwd("~/github/mpi_dogs/")
## Read in the txt file to define whether it is a dog office or not
dt.dog_office <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
## Read in the tsv file with the quicksand data for all samples
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
## Apply the cap to ReadsDeduped
dt.tax[, ReadsDeduped.cap := pmin(ReadsDeduped, 20000)]
## Split dog_office data
dog_office_samples <- dt.dog_office[category2 == "dog_office", sample_id]
non_dog_office_samples <- dt.dog_office[category2 != "dog_office", sample_id]
## Filter tax data for dog_office and non_dog_office samples
dt.tax_dog_office <- dt.tax[sample_id %in% dog_office_samples]
dt.tax_non_dog_office <- dt.tax[sample_id %in% non_dog_office_samples]
## Function to process data for bar plots and pie charts
process_data <- function(dt, relevant_families, threshold) {
dt <- dt[Family %in% relevant_families & ReadsDeduped.cap > threshold]
list(
bar_data = dt[, .(count = uniqueN(sample_id)), by = Family],
pie_data = dt[, .(ReadsDeduped = sum(ReadsDeduped.cap)), by = Family]
)
}
## Set parameters
relevant_families <- c('Hominidae', 'Canidae', 'Felidae', 'Suidae')
## Process data
results_dog_office <- process_data(dt.tax_dog_office, relevant_families, threshold)
results_non_dog_office <- process_data(dt.tax_non_dog_office, relevant_families, threshold)
## Create bar plot function
create_plot <- function(data, title) {
ggplot(data, aes(x = Family, y = count, fill = Family)) +
geom_bar(stat = "identity") +
geom_text(aes(label = count), vjust = -0.3) +
theme_minimal() +
labs(title = title, x = "Family", y = "Number of Samples") +
theme(legend.position = "none")
}
## Create pie chart function
create_pie_chart <- function(data, title) {
ggplot(data, aes(x = "", y = ReadsDeduped, fill = Family)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
labs(title = title) +
geom_text(aes(label = paste0(round(ReadsDeduped/sum(ReadsDeduped)*100, 1), "%")),
position = position_stack(vjust = 0.5))
}
## Create plots
plot_dog_office <- create_plot(results_dog_office$bar_data, "Dog Office Samples")
plot_non_dog_office <- create_plot(results_non_dog_office$bar_data, "Non-Dog Office Samples")
pie_dog_office <- create_pie_chart(results_dog_office$pie_data, "Dog Office ReadsDeduped")
pie_non_dog_office <- create_pie_chart(results_non_dog_office$pie_data, "Non-Dog Office ReadsDeduped")
## Combine all plots
combined_plot <- grid.arrange(
plot_dog_office, plot_non_dog_office,
pie_dog_office, pie_non_dog_office,
ncol = 2
)
## Save combined plot
ggsave("figures/combined_samples_count_and_reads.png", combined_plot, width = 16, height = 16)
## Save individual plots
bar_plots <- grid.arrange(plot_dog_office, plot_non_dog_office, ncol = 2)
ggsave("figures/combined_samples_count.png", bar_plots, width = 16, height = 8)
pie_plots <- grid.arrange(pie_dog_office, pie_non_dog_office, ncol = 2)
#ggsave("figures/combined_samples_count.png", bar_plots, width = 16, height = 8)
ggsave("figures/combined_samples_reads.png", pie_plots, width = 16, height = 8)
pie_dog_office <- create_pie_chart(results_dog_office$pie_data, "Dog Office")
pie_non_dog_office <- create_pie_chart(results_non_dog_office$pie_data, "Non-Dog Office")
## Combine all plots
combined_plot <- grid.arrange(
plot_dog_office, plot_non_dog_office,
pie_dog_office, pie_non_dog_office,
ncol = 2
)
## Save combined plot
ggsave("figures/combined_samples_count_and_reads.png", combined_plot, width = 16, height = 16)
pie_plots <- grid.arrange(pie_dog_office, pie_non_dog_office, ncol = 2)
#ggsave("figures/combined_samples_count.png", bar_plots, width = 16, height = 8)
ggsave("figures/combined_samples_reads.png", pie_plots, width = 16, height = 8)
