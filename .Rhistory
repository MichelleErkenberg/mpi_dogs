p <- ggplot() +
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(sample_id), y = value, fill = dog),
stat = "identity", position = "dodge") +
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "Value", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p)
# Define the threshold for ReadsDeduped
reads_threshold <- 100  # Adjust this value as needed
# Filter the new TSV file based on conditions
dt.filter <- dt.filter[family == "Canidae" & ReadsDeduped >= reads_threshold]
# Define the threshold for ReadsDeduped
reads_threshold <- 1000  # Adjust this value as needed
# Filter the new TSV file based on conditions
dt.filter <- dt.filter[family == "Canidae" & ReadsDeduped >= reads_threshold]
# Filter the new TSV file based on conditions
dt.filter <- dt.filter[Family == "Canidae" & ReadsDeduped >= reads_threshold]
# Get the list of sample_ids that meet the criteria
valid_samples <- dt.filter$sample_id
# Filter the main data to include only valid samples
dt.main <- dt.main[sample_id %in% valid_samples]
# Continue with the rest of your script...
custom_order <- c("Dog Office (Container)", "Dog Office (Lily/ThorA)", "Hallway (Lily/ThorA)", "Dog Office (Anda/Charlie)", "Hallway (Anda/Charlie)", "Non-Dog Office", "Elevator", "Main Entrance", "Lab (PCR Lab)", "Lab (Cleanroom)", "Negativ Control")
# Merge main data with categories
dt.combined <- merge(dt.main, dt.categories, by = "sample_id", all.x = TRUE)
# Identify dog columns
dog_columns <- setdiff(names(dt.combined), c("sample_id", "location"))
# Reshape data to long format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "location"),
variable.name = "dog", value.name = "value")
dt.long[, value := ifelse(is.na(value), NA, value)]
dt.long[, sample_number := as.numeric(sub(".*_", "", sample_id))]
setorder(dt.long, location, sample_number)
dt.long$location <- factor(dt.long$location, levels = custom_order)
# Create the plot
p <- ggplot() +
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(sample_id), y = value, fill = dog),
stat = "identity", position = "dodge") +
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "Value", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p)
# Define the threshold for ReadsDeduped
reads_threshold <- 100  # Adjust this value as needed
# Filter the new TSV file based on conditions
dt.filter <- dt.filter[Family == "Canidae" & ReadsDeduped >= reads_threshold]
# Get the list of sample_ids that meet the criteria
valid_samples <- dt.filter$sample_id
# Filter the main data to include only valid samples
dt.main <- dt.main[sample_id %in% valid_samples]
# Continue with the rest of your script...
custom_order <- c("Dog Office (Container)", "Dog Office (Lily/ThorA)", "Hallway (Lily/ThorA)", "Dog Office (Anda/Charlie)", "Hallway (Anda/Charlie)", "Non-Dog Office", "Elevator", "Main Entrance", "Lab (PCR Lab)", "Lab (Cleanroom)", "Negativ Control")
# Merge main data with categories
dt.combined <- merge(dt.main, dt.categories, by = "sample_id", all.x = TRUE)
# Identify dog columns
dog_columns <- setdiff(names(dt.combined), c("sample_id", "location"))
# Reshape data to long format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "location"),
variable.name = "dog", value.name = "value")
dt.long[, value := ifelse(is.na(value), NA, value)]
dt.long[, sample_number := as.numeric(sub(".*_", "", sample_id))]
setorder(dt.long, location, sample_number)
dt.long$location <- factor(dt.long$location, levels = custom_order)
# Create the plot
p <- ggplot() +
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(sample_id), y = value, fill = dog),
stat = "identity", position = "dodge") +
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "Value", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p)
# Define the threshold for ReadsDeduped
reads_threshold <- 20  # Adjust this value as needed
# Filter the new TSV file based on conditions
dt.filter <- dt.filter[Family == "Canidae" & ReadsDeduped >= reads_threshold]
# Get the list of sample_ids that meet the criteria
valid_samples <- dt.filter$sample_id
# Filter the main data to include only valid samples
dt.main <- dt.main[sample_id %in% valid_samples]
# Continue with the rest of your script...
custom_order <- c("Dog Office (Container)", "Dog Office (Lily/ThorA)", "Hallway (Lily/ThorA)", "Dog Office (Anda/Charlie)", "Hallway (Anda/Charlie)", "Non-Dog Office", "Elevator", "Main Entrance", "Lab (PCR Lab)", "Lab (Cleanroom)", "Negativ Control")
# Merge main data with categories
dt.combined <- merge(dt.main, dt.categories, by = "sample_id", all.x = TRUE)
# Identify dog columns
dog_columns <- setdiff(names(dt.combined), c("sample_id", "location"))
# Reshape data to long format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "location"),
variable.name = "dog", value.name = "value")
dt.long[, value := ifelse(is.na(value), NA, value)]
dt.long[, sample_number := as.numeric(sub(".*_", "", sample_id))]
setorder(dt.long, location, sample_number)
dt.long$location <- factor(dt.long$location, levels = custom_order)
# Create the plot
p <- ggplot() +
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(sample_id), y = value, fill = dog),
stat = "identity", position = "dodge") +
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "Value", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p)
# Define the threshold for ReadsDeduped
reads_threshold <- 0  # Adjust this value as needed
# Filter the new TSV file based on conditions
dt.filter <- dt.filter[Family == "Canidae" & ReadsDeduped >= reads_threshold]
# Get the list of sample_ids that meet the criteria
valid_samples <- dt.filter$sample_id
# Filter the main data to include only valid samples
dt.main <- dt.main[sample_id %in% valid_samples]
# Continue with the rest of your script...
custom_order <- c("Dog Office (Container)", "Dog Office (Lily/ThorA)", "Hallway (Lily/ThorA)", "Dog Office (Anda/Charlie)", "Hallway (Anda/Charlie)", "Non-Dog Office", "Elevator", "Main Entrance", "Lab (PCR Lab)", "Lab (Cleanroom)", "Negativ Control")
# Merge main data with categories
dt.combined <- merge(dt.main, dt.categories, by = "sample_id", all.x = TRUE)
# Identify dog columns
dog_columns <- setdiff(names(dt.combined), c("sample_id", "location"))
# Reshape data to long format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "location"),
variable.name = "dog", value.name = "value")
dt.long[, value := ifelse(is.na(value), NA, value)]
dt.long[, sample_number := as.numeric(sub(".*_", "", sample_id))]
setorder(dt.long, location, sample_number)
dt.long$location <- factor(dt.long$location, levels = custom_order)
# Create the plot
p <- ggplot() +
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(sample_id), y = value, fill = dog),
stat = "identity", position = "dodge") +
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "Value", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p)
# Read the main CSV file with dog data
dt.main <- fread('data/dog_samples/R_prep/all_dogs_ACwoL/R_prep_sample_vs_dog_ACwoL_10snp_renamed.csv', na.strings = c('-', 'NA', ''))
# Read the TXT file with location categories
dt.categories <- fread('data/dog_samples/R_prep/sample_location.txt', na.strings = c('-', 'NA', ''))
# Read the new TSV file for filtering
dt.filter <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-', 'NA', ''))
# Print information about the datasets
print(paste("Number of samples in main data:", nrow(dt.main)))
print(paste("Number of samples in filter data:", nrow(dt.filter)))
# Check for missing columns
if(!"family" %in% names(dt.filter) || !"ReadsDeduped" %in% names(dt.filter)) {
stop("Missing required columns in filter data")
}
# Check for missing columns
if(!"Family" %in% names(dt.filter) || !"ReadsDeduped" %in% names(dt.filter)) {
stop("Missing required columns in filter data")
}
# Convert family to character if it's not already
dt.filter[, Family := as.character(Family)]
# Define the threshold for ReadsDeduped
reads_threshold <- 0  # Set to 0 to include all samples
# Filter the new TSV file based on conditions
dt.filter_valid <- dt.filter[Family == "Canidae" & ReadsDeduped >= reads_threshold]
print(paste("Number of valid samples after filtering:", nrow(dt.filter_valid)))
# Get the list of sample_ids that meet the criteria
valid_samples <- dt.filter_valid$sample_id
# Check how many samples from the main data are in the valid samples list
print(paste("Number of main samples in valid list:", sum(dt.main$sample_id %in% valid_samples)))
# Filter the main data to include only valid samples
dt.main_filtered <- dt.main[sample_id %in% valid_samples]
print(paste("Number of samples in filtered main data:", nrow(dt.main_filtered)))
dt.main <- dt.main_filtered
# Define the threshold for ReadsDeduped
reads_threshold <- 0  # Adjust this value as needed
# Filter the new TSV file based on conditions
dt.filter <- dt.filter[Family == "Canidae" & ReadsDeduped >= reads_threshold]
# Get the list of sample_ids that meet the criteria
valid_samples <- dt.filter$sample_id
# Filter the main data to include only valid samples
dt.main <- dt.main[sample_id %in% valid_samples]
# Continue with the rest of your script...
custom_order <- c("Dog Office (Container)", "Dog Office (Lily/ThorA)", "Hallway (Lily/ThorA)", "Dog Office (Anda/Charlie)", "Hallway (Anda/Charlie)", "Non-Dog Office", "Elevator", "Main Entrance", "Lab (PCR Lab)", "Lab (Cleanroom)", "Negativ Control")
# Merge main data with categories
dt.combined <- merge(dt.main, dt.categories, by = "sample_id", all.x = TRUE)
# Identify dog columns
dog_columns <- setdiff(names(dt.combined), c("sample_id", "location"))
# Reshape data to long format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "location"),
variable.name = "dog", value.name = "value")
dt.long[, value := ifelse(is.na(value), NA, value)]
dt.long[, sample_number := as.numeric(sub(".*_", "", sample_id))]
setorder(dt.long, location, sample_number)
dt.long$location <- factor(dt.long$location, levels = custom_order)
# Create the plot
p <- ggplot() +
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(sample_id), y = value, fill = dog),
stat = "identity", position = "dodge") +
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "Value", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p)
# Define the threshold for ReadsDeduped
reads_threshold <- 10  # Adjust this value as needed
# Filter the new TSV file based on conditions
dt.filter <- dt.filter[Family == "Canidae" & ReadsDeduped >= reads_threshold]
# Get the list of sample_ids that meet the criteria
valid_samples <- dt.filter$sample_id
# Filter the main data to include only valid samples
dt.main <- dt.main[sample_id %in% valid_samples]
# Continue with the rest of your script...
custom_order <- c("Dog Office (Container)", "Dog Office (Lily/ThorA)", "Hallway (Lily/ThorA)", "Dog Office (Anda/Charlie)", "Hallway (Anda/Charlie)", "Non-Dog Office", "Elevator", "Main Entrance", "Lab (PCR Lab)", "Lab (Cleanroom)", "Negativ Control")
# Merge main data with categories
dt.combined <- merge(dt.main, dt.categories, by = "sample_id", all.x = TRUE)
# Identify dog columns
dog_columns <- setdiff(names(dt.combined), c("sample_id", "location"))
# Reshape data to long format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "location"),
variable.name = "dog", value.name = "value")
dt.long[, value := ifelse(is.na(value), NA, value)]
dt.long[, sample_number := as.numeric(sub(".*_", "", sample_id))]
setorder(dt.long, location, sample_number)
dt.long$location <- factor(dt.long$location, levels = custom_order)
# Create the plot
p <- ggplot() +
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(sample_id), y = value, fill = dog),
stat = "identity", position = "dodge") +
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "Value", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p)
# Define the threshold for ReadsDeduped
reads_threshold <- 1000  # Adjust this value as needed
# Filter the new TSV file based on conditions
dt.filter <- dt.filter[Family == "Canidae" & ReadsDeduped >= reads_threshold]
# Get the list of sample_ids that meet the criteria
valid_samples <- dt.filter$sample_id
# Filter the main data to include only valid samples
dt.main <- dt.main[sample_id %in% valid_samples]
# Continue with the rest of your script...
custom_order <- c("Dog Office (Container)", "Dog Office (Lily/ThorA)", "Hallway (Lily/ThorA)", "Dog Office (Anda/Charlie)", "Hallway (Anda/Charlie)", "Non-Dog Office", "Elevator", "Main Entrance", "Lab (PCR Lab)", "Lab (Cleanroom)", "Negativ Control")
# Merge main data with categories
dt.combined <- merge(dt.main, dt.categories, by = "sample_id", all.x = TRUE)
# Identify dog columns
dog_columns <- setdiff(names(dt.combined), c("sample_id", "location"))
# Reshape data to long format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "location"),
variable.name = "dog", value.name = "value")
dt.long[, value := ifelse(is.na(value), NA, value)]
dt.long[, sample_number := as.numeric(sub(".*_", "", sample_id))]
setorder(dt.long, location, sample_number)
dt.long$location <- factor(dt.long$location, levels = custom_order)
# Create the plot
p <- ggplot() +
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(sample_id), y = value, fill = dog),
stat = "identity", position = "dodge") +
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "Value", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p)
# Read the main CSV file with dog data
dt.main <- fread('data/dog_samples/R_prep/all_dogs_ACwoL/R_prep_sample_vs_dog_ACwoL_10snp_renamed.csv', na.strings = c('-', 'NA', ''))
# Read the TXT file with location categories
dt.categories <- fread('data/dog_samples/R_prep/sample_location.txt', na.strings = c('-', 'NA', ''))
# Read the new TSV file for filtering
dt.filter <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-', 'NA', ''))
# Define the threshold for ReadsDeduped
reads_threshold <- 20  # Set to 0 to include all samples or adjust as needed
# Filter the new TSV file based on conditions
dt.filter_valid <- dt.filter[Family == "Canidae" & ReadsDeduped >= reads_threshold]
# Get the list of sample_ids that meet the criteria
valid_samples <- dt.filter_valid$sample_id
# Filter the main data to include only valid samples
dt.main_filtered <- dt.main[sample_id %in% valid_samples]
# Define custom order for locations
custom_order <- c("Dog Office (Container)", "Dog Office (Lily/ThorA)", "Hallway (Lily/ThorA)",
"Dog Office (Anda/Charlie)", "Hallway (Anda/Charlie)", "Non-Dog Office",
"Elevator", "Main Entrance", "Lab (PCR Lab)", "Lab (Cleanroom)",
"Negativ Control")
# Merge main data with categories
dt.combined <- merge(dt.main_filtered, dt.categories, by = "sample_id", all.x = TRUE)
# Identify dog columns (all columns except sample_id and location)
dog_columns <- setdiff(names(dt.combined), c("sample_id", "location"))
# Reshape data to long format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "location"),
variable.name = "dog", value.name = "value")
# Replace NA values in the value column with NA (keine Balken für fehlende Werte)
dt.long[, value := ifelse(is.na(value), NA, value)]
# Extract number from sample_id for sorting
dt.long[, sample_number := as.numeric(sub(".*_", "", sample_id))]
# Sort data by location and sample_number
setorder(dt.long, location, sample_number)
# Apply custom order to location factor
dt.long$location <- factor(dt.long$location, levels = custom_order)
# Create the bar plot
p <- ggplot() +
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(sample_id), y = value, fill = dog),
stat = "identity", position = "dodge") +
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "Value", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p)
# Save the plot
ggsave("figures/dogs_categorized_10snp_readsdeduped.png", p, width = 24, height = length(dog_columns) * 2, limitsize = FALSE)
# Define the threshold for ReadsDeduped
reads_threshold <- 20
# Filter the new TSV file based on conditions
dt.filter_valid <- dt.filter[Family == "Canidae" & ReadsDeduped >= reads_threshold]
# Get the list of sample_ids that meet the criteria
valid_samples <- dt.filter_valid$sample_id
# Filter the main data to include only valid samples
dt.main_filtered <- dt.main[sample_id %in% valid_samples]
# Define custom order for locations
custom_order <- c("Dog Office (Container)", "Dog Office (Lily/ThorA)", "Hallway (Lily/ThorA)",
"Dog Office (Anda/Charlie)", "Hallway (Anda/Charlie)", "Non-Dog Office",
"Elevator", "Main Entrance", "Lab (PCR Lab)", "Lab (Cleanroom)",
"Negativ Control")
# Merge main data with categories
dt.combined <- merge(dt.main_filtered, dt.categories, by = "sample_id", all.x = TRUE)
# Identify dog columns (all columns except sample_id and location)
dog_columns <- setdiff(names(dt.combined), c("sample_id", "location"))
# Reshape data to long format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "location"),
variable.name = "dog", value.name = "value")
# Extract number from sample_id for sorting
dt.long[, sample_number := as.numeric(sub(".*_", "", sample_id))]
# Sort data by location and sample_number
setorder(dt.long, location, sample_number)
# Apply custom order to location factor
dt.long$location <- factor(dt.long$location, levels = custom_order)
# Create the bar plot
p <- ggplot() +
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(sample_id), y = value, fill = dog),
stat = "identity", position = "dodge") +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "Value", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p)
# Read the main CSV file with dog data
dt.main <- fread('data/dog_samples/R_prep/all_dogs_ACwoL/R_prep_sample_vs_dog_ACwoL_10snp_renamed.csv', na.strings = c('-', 'NA', ''))
# Read the TXT file with location categories
dt.categories <- fread('data/dog_samples/R_prep/sample_location.txt', na.strings = c('-', 'NA', ''))
# Read the new TSV file for filtering
dt.filter <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-', 'NA', ''))
# Define the threshold for ReadsDeduped
reads_threshold <- 20
# Filter the new TSV file based on conditions
dt.filter_valid <- dt.filter[Family == "Canidae" & ReadsDeduped >= reads_threshold]
# Get the list of sample_ids that meet the criteria
valid_samples <- dt.filter_valid$sample_id
# Filter the main data to include only valid samples
dt.main_filtered <- dt.main[sample_id %in% valid_samples]
# Define custom order for locations
custom_order <- c("Dog Office (Container)", "Dog Office (Lily/ThorA)", "Hallway (Lily/ThorA)",
"Dog Office (Anda/Charlie)", "Hallway (Anda/Charlie)", "Non-Dog Office",
"Elevator", "Main Entrance", "Lab (PCR Lab)", "Lab (Cleanroom)",
"Negativ Control")
# Merge main data with categories
dt.combined <- merge(dt.main_filtered, dt.categories, by = "sample_id", all.x = TRUE)
# Reshape data to long format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "location"),
variable.name = "dog", value.name = "value")
# Extract number from sample_id for sorting
dt.long[, sample_number := as.numeric(sub(".*_", "", sample_id))]
# Sort data by location and sample_number
setorder(dt.long, location, sample_number)
# Apply custom order to location factor
dt.long$location <- factor(dt.long$location, levels = custom_order)
# Create the bar plot with asterisks for NA values
p <- ggplot() +
# Add bars only for non-NA values
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(sample_id), y = value, fill = dog),
stat = "identity", position = "dodge") +
# Add asterisks for NA values (valid samples with missing data)
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "Value", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p)
# Define the threshold for ReadsDeduped
reads_threshold <- 200
# Filter the new TSV file based on conditions
dt.filter_valid <- dt.filter[Family == "Canidae" & ReadsDeduped >= reads_threshold]
# Get the list of sample_ids that meet the criteria
valid_samples <- dt.filter_valid$sample_id
# Filter the main data to include only valid samples
dt.main_filtered <- dt.main[sample_id %in% valid_samples]
# Define custom order for locations
custom_order <- c("Dog Office (Container)", "Dog Office (Lily/ThorA)", "Hallway (Lily/ThorA)",
"Dog Office (Anda/Charlie)", "Hallway (Anda/Charlie)", "Non-Dog Office",
"Elevator", "Main Entrance", "Lab (PCR Lab)", "Lab (Cleanroom)",
"Negativ Control")
# Merge main data with categories
dt.combined <- merge(dt.main_filtered, dt.categories, by = "sample_id", all.x = TRUE)
# Reshape data to long format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "location"),
variable.name = "dog", value.name = "value")
# Extract number from sample_id for sorting
dt.long[, sample_number := as.numeric(sub(".*_", "", sample_id))]
# Sort data by location and sample_number
setorder(dt.long, location, sample_number)
# Apply custom order to location factor
dt.long$location <- factor(dt.long$location, levels = custom_order)
# Create the bar plot with asterisks for NA values
p <- ggplot() +
# Add bars only for non-NA values
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(sample_id), y = value, fill = dog),
stat = "identity", position = "dodge") +
# Add asterisks for NA values (valid samples with missing data)
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "Value", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p)
# Define the threshold for ReadsDeduped
reads_threshold <- 50
# Filter the new TSV file based on conditions
dt.filter_valid <- dt.filter[Family == "Canidae" & ReadsDeduped >= reads_threshold]
# Get the list of sample_ids that meet the criteria
valid_samples <- dt.filter_valid$sample_id
# Filter the main data to include only valid samples
dt.main_filtered <- dt.main[sample_id %in% valid_samples]
# Define custom order for locations
custom_order <- c("Dog Office (Container)", "Dog Office (Lily/ThorA)", "Hallway (Lily/ThorA)",
"Dog Office (Anda/Charlie)", "Hallway (Anda/Charlie)", "Non-Dog Office",
"Elevator", "Main Entrance", "Lab (PCR Lab)", "Lab (Cleanroom)",
"Negativ Control")
# Merge main data with categories
dt.combined <- merge(dt.main_filtered, dt.categories, by = "sample_id", all.x = TRUE)
# Reshape data to long format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "location"),
variable.name = "dog", value.name = "value")
# Extract number from sample_id for sorting
dt.long[, sample_number := as.numeric(sub(".*_", "", sample_id))]
# Sort data by location and sample_number
setorder(dt.long, location, sample_number)
# Apply custom order to location factor
dt.long$location <- factor(dt.long$location, levels = custom_order)
# Create the bar plot with asterisks for NA values
p <- ggplot() +
# Add bars only for non-NA values
geom_bar(data = dt.long[!is.na(value)], aes(x = factor(sample_id), y = value, fill = dog),
stat = "identity", position = "dodge") +
# Add asterisks for NA values (valid samples with missing data)
geom_text(data = dt.long[is.na(value)], aes(x = factor(sample_id), y = 0, label = "*"),
position = position_dodge(width = 0.9), vjust = -0.5) +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location (Filtered)",
x = "Sample ID", y = "Value", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p)
# Save the plot
ggsave("figures/dogs_categorized_10snp_50readsdeduped.png", p, width = 24, height = length(dog_columns) * 2, limitsize = FALSE)
