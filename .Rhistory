# Einlesen der CSV-Datei mit den Hauptdaten
dt.main <- fread('data/dog_samples/R_prep/all_dogs_ACwoL/R_prep_sample_vs_dog_ACwoL_renamed.csv', na.strings = c('-','NA',''))
# Einlesen der TXT-Datei mit den Kategorien
dt.categories <- fread('data/dog_samples/R_prep/sample_location.txt', na.strings = c('-','NA',''))
# Einlesen der CSV-Datei mit den Hauptdaten
dt.main <- fread('data/dog_samples/R_prep/all_dogs_ACwoL/R_prep_sample_vs_dog_ACwoL_renamed.csv', na.strings = c('-','NA',''))
# Einlesen der TXT-Datei mit den Kategorien
dt.categories <- fread('data/dog_samples/R_prep/sample_location.txt', na.strings = c('-','NA',''))
# Zusammenführen der Hauptdaten mit den Kategorien
dt.combined <- merge(dt.main, dt.categories, by = "sample_id", all.x = TRUE)
# Identifizieren der Hundespalten (alle Spalten außer sample_id und location)
dog_columns <- setdiff(names(dt.combined), c("sample_id", "location"))
# Umformen der Daten in ein langes Format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "location"),
variable.name = "dog", value.name = "value")
# Ersetzen von NA-Werten durch 0
dt.long[is.na(value), value := 0]
# Sortieren der Daten nach location und sample_id
dt.long <- dt.long[order(location, sample_id)]
# Erstellen des Balkendiagramms
p <- ggplot(dt.long, aes(x = sample_id, y = value, fill = dog)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_minimal() +
labs(title = "Hundewerte nach Proben und Standorten",
x = "Sample ID", y = "Wert", fill = "Hund") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none") +
scale_x_discrete(breaks = unique(dt.long$sample_id))
print(p)
# Extrahieren der Zahl aus der sample_id
dt.main[, id_number := as.numeric(str_extract(sample_id, "\\d+"))]
dt.categories[, id_number := as.numeric(str_extract(sample_id, "\\d+"))]
library(stringr)
# Arbeitsverzeichnis setzen
setwd("~/github/mpi_dogs/")
# Einlesen der CSV-Datei mit den Hauptdaten
dt.main <- fread('data/dog_samples/R_prep/all_dogs_ACwoL/R_prep_sample_vs_dog_ACwoL_renamed.csv', na.strings = c('-','NA',''))
# Einlesen der TXT-Datei mit den Kategorien
dt.categories <- fread('data/dog_samples/R_prep/sample_location.txt', na.strings = c('-','NA',''))
# Extrahieren der Zahl aus der sample_id
dt.main[, id_number := as.numeric(str_extract(sample_id, "\\d+"))]
dt.categories[, id_number := as.numeric(str_extract(sample_id, "\\d+"))]
# Zusammenführen der Hauptdaten mit den Kategorien
dt.combined <- merge(dt.main, dt.categories, by = "sample_id", all.x = TRUE)
# Identifizieren der Hundespalten (alle Spalten außer sample_id, id_number und location)
dog_columns <- setdiff(names(dt.combined), c("sample_id", "id_number", "location"))
# Umformen der Daten in ein langes Format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "id_number", "location"),
variable.name = "dog", value.name = "value")
# Identifizieren der Hundespalten (alle Spalten außer sample_id, id_number und location)
dog_columns <- setdiff(names(dt.combined), c("sample_id", "location"))
# Umformen der Daten in ein langes Format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "location"),
variable.name = "dog", value.name = "value")
# Ersetzen von NA-Werten durch 0
dt.long[is.na(value), value := 0]
# Sortieren der Daten nach location und id_number
dt.long <- dt.long[order(location, id_number)]
# Erstellen des Balkendiagramms
p <- ggplot(dt.long, aes(x = factor(id_number), y = value, fill = dog)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_minimal() +
labs(title = "Hundewerte nach Proben und Standorten",
x = "Proben-ID", y = "Wert", fill = "Hund") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none") +
scale_x_discrete(breaks = unique(dt.long$id_number))
dt.categories[, id_number := as.numeric(str_extract(sample_id, "\\d+"))]
# Zusammenführen der Hauptdaten mit den Kategorien
dt.combined <- merge(dt.main, dt.categories, by = "sample_id", all.x = TRUE)
# Identifizieren der Hundespalten (alle Spalten außer sample_id, id_number und location)
dog_columns <- setdiff(names(dt.combined), c("sample_id", "location"))
# Umformen der Daten in ein langes Format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "id_number" "location"),
library(data.table)
library(ggplot2)
# Arbeitsverzeichnis setzen
setwd("~/github/mpi_dogs/")
# Einlesen der CSV-Datei mit den Hauptdaten
dt.main <- fread('data/dog_samples/R_prep/all_dogs_ACwoL/R_prep_sample_vs_dog_ACwoL_renamed.csv', na.strings = c('-','NA',''))
# Einlesen der TXT-Datei mit den Kategorien
dt.categories <- fread('data/dog_samples/R_prep/sample_location.txt', na.strings = c('-','NA',''))
# Zusammenführen der Hauptdaten mit den Kategorien
dt.combined <- merge(dt.main, dt.categories, by = "sample_id", all.x = TRUE)
# Identifizieren der Hundespalten (alle Spalten außer sample_id und location)
dog_columns <- setdiff(names(dt.combined), c("sample_id", "location"))
# Umformen der Daten in ein langes Format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "location"),
variable.name = "dog", value.name = "value")
# Ersetzen von NA-Werten durch 0
dt.long[is.na(value), value := 0]
# Extrahieren der Nummer aus sample_id
dt.long[, sample_number := as.numeric(sub(".*_", "", sample_id))]
# Sortieren der Daten nach location und sample_number
setorder(dt.long, location, sample_number)
# Erstellen des Balkendiagramms
p <- ggplot(dt.long, aes(x = factor(sample_number), y = value, fill = dog)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_minimal() +
labs(title = "Hundewerte nach Proben und Standorten",
x = "Proben-Nummer", y = "Wert", fill = "Hund") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p)
# Speichern des Plots
ggsave("figures/dogs_categorized.png", p, width = 24, height = length(dog_columns) * 2, limitsize = FALSE)
# Erstellen des Balkendiagramms
p <- ggplot(dt.long, aes(x = factor(sample_number), y = value, fill = dog)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Hundewerte nach Proben und Standorten",
x = "Proben-Nummer", y = "Wert", fill = "Hund") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
print(p)
# Speichern des Plots
ggsave("figures/dogs_categorized.png", p, width = 24, height = length(dog_columns) * 2, limitsize = FALSE)
## Create the plot
ggplot(dt.tax_filtered, aes(x = ReadsDeduped, y = CategoryLabelWithCount, fill = Family)) +
geom_boxplot(position = position_dodge(width = 0.8), width = 0.7, alpha = 0.7) +
coord_cartesian(xlim = c(1, max(dt.tax_filtered$ReadsDeduped, na.rm = TRUE))) +
scale_x_log10(labels = scales::comma) +
theme_bw() +
labs(title = "Distribution of Reads by Location and Family",
x = "mtDNA (log10 scale)",
y = "Location",
fill = "Family") +
theme(
legend.position = "bottom",
legend.box.just = "center",
legend.margin = margin(t = 0, r = 0, b = 0, l = 0)) +
scale_fill_manual(values = custom_colors)
## Save the plot
ggsave("figures/category_family_distribution.png", width = 12, height = 10)
library(data.table)
library(ggplot2)
library(dplyr)
## Set working directory
setwd("~/github/mpi_dogs/")
## Read in the txt file with dog office and category information
dt.dog_office <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
## Read in the tsv file with the quicksand data for all samples
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
# Define threshold
threshold_reads <- 15000
## Filter and prepare the data
dt.tax_filtered <- merge(dt.tax, dt.dog_office[, .(sample_id, category, category2, office)], by="sample_id", all.x=TRUE)
dt.tax_filtered <- dt.tax_filtered[ReadsRaw >= threshold_reads]
dt.tax_filtered <- dt.tax_filtered[Family %in% c('Hominidae', 'Canidae')]
# Print information about removed samples
total_samples <- nrow(dt.tax)
filtered_samples <- nrow(dt.tax_filtered)
removed_samples <- total_samples - filtered_samples
print(paste("Removed", removed_samples, "samples below the threshold of", threshold_reads, "reads."))
## Define family order and custom colors
custom_colors <- c("Hominidae" = "#fed976", "Canidae" = "#35978f")
## Extract unique categories
unique_categories <- unique(dt.dog_office$category2)
print(unique_categories)
## Manual adjustments
category_mapping <- c(
"dog_office" = "Dog Office",
"main-entrance" = "Main Entrance",
"elevator" = "Elevator",
"hallway" = "Hallway",
"nc_office" = "No Dog Office",
"nc" = "Negative Control",
"lab" = "Lab"
)
## Apply the mapping to create the Category column
dt.tax_filtered[, Category := factor(category2, levels = names(category_mapping), labels = category_mapping)]
## Create a new column for combined category labels, only for "lab" category
dt.tax_filtered[, CategoryLabel := ifelse(category2 == "lab",
paste0(Category, " (", office, ")"),
as.character(Category))]
# unique lab categories
lab_categories <- sort(unique(dt.tax_filtered[category2 == "lab", CategoryLabel]))
# define order
custom_order <- c(
"Negative Control",
lab_categories[1],  # "Lab (Cleanroom)"
lab_categories[2],  # "Lab (PCR Lab)"
"No Dog Office",
"Hallway",
"Elevator",
"Main Entrance",
"Dog Office"
)
## Ensure the order of categories is preserved with the custom order
dt.tax_filtered[, ReadsDeduped := ReadsDeduped + 1]
## Count unique samples per location after filtering
sample_counts <- dt.tax_filtered[, .(N = uniqueN(sample_id)), by = .(CategoryLabel)][
, CategoryLabel := factor(CategoryLabel, levels = custom_order)
][order(CategoryLabel)]
## Create new labels with sample counts
sample_counts[, CategoryLabelWithCount := paste0(CategoryLabel, "\n(n = ", N, ")")]
## Update factor levels in the main dataset
dt.tax_filtered[, CategoryLabelWithCount := factor(
CategoryLabel,
levels = sample_counts$CategoryLabel,
labels = sample_counts$CategoryLabelWithCount
)]
## Create the plot
ggplot(dt.tax_filtered, aes(x = ReadsDeduped, y = CategoryLabelWithCount, fill = Family)) +
geom_boxplot(position = position_dodge(width = 0.8), width = 0.7, alpha = 0.7) +
coord_cartesian(xlim = c(1, max(dt.tax_filtered$ReadsDeduped, na.rm = TRUE))) +
scale_x_log10(labels = scales::comma) +
theme_bw() +
labs(title = "Distribution of Reads by Location and Family",
x = "mtDNA (log10 scale)",
y = "Location",
fill = "Family") +
theme(
legend.position = "bottom",
legend.box.just = "center",
legend.margin = margin(t = 0, r = 0, b = 0, l = 0)) +
scale_fill_manual(values = custom_colors)
## Save the plot
ggsave("figures/category_family_distribution.png", width = 12, height = 10)
library(data.table)
library(ggplot2)
# Set working directory
setwd("~/github/mpi_dogs/")
# Read the main CSV file with dog data
dt.main <- fread('data/dog_samples/R_prep/all_dogs_ACwoL/R_prep_sample_vs_dog_ACwoL_renamed.csv', na.strings = c('-','NA',''))
# Read the TXT file with location categories
dt.categories <- fread('data/dog_samples/R_prep/sample_location.txt', na.strings = c('-','NA',''))
# Define custom order and custom colors
custom_colors <- c()  # Add your custom colors here if needed
custom_order <- c() # Add custom order if needed
# Merge main data with categories
dt.combined <- merge(dt.main, dt.categories, by = "sample_id", all.x = TRUE)
# Identify dog columns (all columns except sample_id and location)
dog_columns <- setdiff(names(dt.combined), c("sample_id", "location"))
# Reshape data to long format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "location"),
variable.name = "dog", value.name = "value")
# Replace NA values with 0
dt.long[is.na(value), value := 0]
# Extract number from sample_id
dt.long[, sample_number := as.numeric(sub(".*_", "", sample_id))]
# Sort data by location and sample_number
setorder(dt.long, location, sample_number)
# Create the bar plot
p <- ggplot(dt.long, aes(x = factor(sample_number), y = value, fill = dog)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location",
x = "Sample Number", y = "Value", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
# Apply custom order to location factor
dt.long$location <- factor(dt.long$location, levels = custom_order)
# Apply custom colors if defined
if(length(custom_colors) > 0) {
p <- p + scale_fill_manual(values = custom_colors)
}
print(p)
library(data.table)
library(ggplot2)
# Set working directory
setwd("~/github/mpi_dogs/")
# Read the main CSV file with dog data
dt.main <- fread('data/dog_samples/R_prep/all_dogs_ACwoL/R_prep_sample_vs_dog_ACwoL_renamed.csv', na.strings = c('-','NA',''))
# Read the TXT file with location categories
dt.categories <- fread('data/dog_samples/R_prep/sample_location.txt', na.strings = c('-','NA',''))
# Define custom order and custom colors
custom_colors <- c()  # Add your custom colors here if needed
custom_order <- c()  # Leave this empty if you want to sort by sample ID number
# Merge main data with categories
dt.combined <- merge(dt.main, dt.categories, by = "sample_id", all.x = TRUE)
# Identify dog columns (all columns except sample_id and location)
dog_columns <- setdiff(names(dt.combined), c("sample_id", "location"))
# Reshape data to long format
dt.long <- melt(dt.combined, id.vars = c("sample_id", "location"),
variable.name = "dog", value.name = "value")
# Replace NA values with 0
dt.long[is.na(value), value := 0]
# Extract number from sample_id
dt.long[, sample_number := as.numeric(sub(".*_", "", sample_id))]
# Sort data by location and sample_number
setorder(dt.long, location, sample_number)
# Apply custom order to location factor if provided, otherwise sort by sample number
if(length(custom_order) > 0) {
dt.long$location <- factor(dt.long$location, levels = custom_order)
} else {
dt.long$location <- factor(dt.long$location, levels = unique(dt.long$location[order(dt.long$sample_number)]))
}
# Create the bar plot
p <- ggplot(dt.long, aes(x = factor(sample_number), y = value, fill = dog)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(dog ~ location, scales = "free_x", space = "free_x") +
theme_bw() +
labs(title = "Dog Values by Sample and Location",
x = "Sample Number", y = "Value", fill = "Dog") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
strip.text = element_text(size = 10, face = "bold"),
legend.position = "none")
# Apply custom colors if defined
if(length(custom_colors) > 0) {
p <- p + scale_fill_manual(values = custom_colors)
}
print(p)
# Save the plot
ggsave("figures/dogs_categorized.png", p, width = 24, height = length(dog_columns) * 2, limitsize = FALSE)
