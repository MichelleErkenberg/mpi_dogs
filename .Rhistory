<<<<<<< HEAD
library("igraph")
# ---- Graph g1 ----
vertices_g1 <- c("a","b","c")
edges_g1 <- c("e1","e2")
adjacencyMatrix_g1 <- matrix(data = c(0,0,1,0,0,1,1,1,0), nrow = 3, byrow = T)
colnames(adjacencyMatrix_g1) = rownames(adjacencyMatrix_g1) = vertices_g1
print(adjacencyMatrix_g1)
g1 <- graph_from_adjacency_matrix(adjacencyMatrix_g1, mode = "undirected")
install.packages("igraph")
library("igraph")
# ---- Graph g1 ----
vertices_g1 <- c("a","b","c")
edges_g1 <- c("e1","e2")
adjacencyMatrix_g1 <- matrix(data = c(0,0,1,0,0,1,1,1,0), nrow = 3, byrow = T)
colnames(adjacencyMatrix_g1) = rownames(adjacencyMatrix_g1) = vertices_g1
print(adjacencyMatrix_g1)
g1 <- graph_from_adjacency_matrix(adjacencyMatrix_g1, mode = "undirected")
plot(g1)
# ---- Graph g2 ----
vertices_g2 <- c("a","b","c", "d", "e")
adjacencyMatrix_g2 <- matrix(data = c(0,1,0,1,0,1,1,2,0,0,0,2,0,1,3,1,0,1,0,1,0,0,3,1,0), nrow = 5, byrow = T)
colnames(adjacencyMatrix_g2) = rownames(adjacencyMatrix_g2) = vertices_g2
print(adjacencyMatrix_g2)
g2 <- graph_from_adjacency_matrix(adjacencyMatrix_g2, mode = "undirected")
plot(g2)
vertices_g3 <- c("a","b","c", "d", "e")
adjacencyMatrix_g3 <- matrix(data = c(0,1,0,1,0,0,1,1,0,0,0,1,0,1,2,0,0,0,0,1,0,0,1,0,0), nrow = 5, byrow = T)
colnames(adjacencyMatrix_g3) = rownames(adjacencyMatrix_g3) = vertices_g3
print(adjacencyMatrix_g3)
g3 <- graph_from_adjacency_matrix(adjacencyMatrix_g3, mode = "directed")
plot(g3)
vertices_g1 <- c("a","b","c")
edges_g1 <- c("e1","e2")
adjacencyMatrix_g1 <- matrix(data = c(0,0,1,0,0,1,1,1,0), nrow = 3, byrow = T)
colnames(adjacencyMatrix_g1) = rownames(adjacencyMatrix_g1) = vertices_g1
print(adjacencyMatrix_g1)
g1 <- graph_from_adjacency_matrix(adjacencyMatrix_g1, mode = "undirected")
plot(g1)
# ---- Graph g2 ----
vertices_g2 <- c("a","b","c", "d", "e")
adjacencyMatrix_g2 <- matrix(data = c(0,1,0,1,0,1,1,2,0,0,0,2,0,1,3,1,0,1,0,1,0,0,3,1,0), nrow = 5, byrow = T)
colnames(adjacencyMatrix_g2) = rownames(adjacencyMatrix_g2) = vertices_g2
print(adjacencyMatrix_g2)
g2 <- graph_from_adjacency_matrix(adjacencyMatrix_g2, mode = "undirected")
plot(g2)
vertices_g4 <- c("a","b","c", "d", "e", "f", "g", "h", "i", "j")
adjacencyMatrix_g4 <- matrix(data = c(2,1,0,1,0,1,1,2,0,0,0,2,3,1,3,1,0,1,0,1,0,0,3,1,1), nrow = 5, byrow = T)
colnames(adjacencyMatrix_g4) = rownames(adjacencyMatrix_g4) = vertices_g4
print(adjacencyMatrix_g4)
g4 <- graph_from_adjacency_matrix(adjacencyMatrix_g4, mode = "undirected")
plot(g4)
adjacencyMatrix_g4 <- matrix(data = c(2,1,0,0,0,1,1,2,0,0,0,2,3,1,0,1,0,1,0,1,0,0,3,1,1), nrow = 5, byrow = T)
colnames(adjacencyMatrix_g4) = rownames(adjacencyMatrix_g4) = vertices_g4
print(adjacencyMatrix_g4)
g4 <- graph_from_adjacency_matrix(adjacencyMatrix_g4, mode = "undirected")
plot(g4)
vertices_g4 <- c("a","b","c", "d", "e", "f", "g", "h", "i", "j")
adjacencyMatrix_g4 <- matrix(data = c(2,1,0,0,0,1,1,2,0,0,0,2,3,1,0,1,0,1,0,1,0,0,3,1,1), nrow = 5, byrow = T)
colnames(adjacencyMatrix_g4) = rownames(adjacencyMatrix_g4) = vertices_g4
print(adjacencyMatrix_g4)
g4 <- graph_from_adjacency_matrix(adjacencyMatrix_g4, mode = "undirected")
plot(g4)
vertices_g3 <- c("a","b","c", "d", "e")
adjacencyMatrix_g3 <- matrix(data = c(0,1,0,1,0,0,1,1,0,0,0,1,0,1,2,0,0,0,0,1,0,0,1,0,0), nrow = 5, byrow = T)
colnames(adjacencyMatrix_g3) = rownames(adjacencyMatrix_g3) = vertices_g3
print(adjacencyMatrix_g3)
g3 <- graph_from_adjacency_matrix(adjacencyMatrix_g3, mode = "directed")
plot(g3)
vertices_g4 <- c("a","b","c", "d", "e", "f", "g", "h", "i", "j")
adjacencyMatrix_g4 <- matrix(data = c(2,1,0,0,0,1,1,2,0,0,0,2,3,1,0,1,0,1,0,1,0,0,3,1,1,2,0,2,1,1,0,1,0,0,0,2), nrow = 10, byrow = T)
colnames(adjacencyMatrix_g4) = rownames(adjacencyMatrix_g4) = vertices_g4
print(adjacencyMatrix_g4)
g4 <- graph_from_adjacency_matrix(adjacencyMatrix_g4, mode = "undirected")
plot(g4)
adjacencyMatrix_g4 <- matrix(data = c(1,1,1,1,1,1,1,1,1,1), nrow = 10, byrow = T)
colnames(adjacencyMatrix_g4) = rownames(adjacencyMatrix_g4) = vertices_g4
print(adjacencyMatrix_g4)
g4 <- graph_from_adjacency_matrix(adjacencyMatrix_g4, mode = "undirected")
plot(g4)
vertices_g1 <- c("a","b","c")
edges_g1 <- c("e1","e2")
adjacencyMatrix_g1 <- matrix(data = c(0,0,1,0,0,1,1,1,0), nrow = 3, byrow = T)
colnames(adjacencyMatrix_g1) = rownames(adjacencyMatrix_g1) = vertices_g1
print(adjacencyMatrix_g1)
g1 <- graph_from_adjacency_matrix(adjacencyMatrix_g1, mode = "undirected")
plot(g1)
# ---- Graph g2 ----
vertices_g2 <- c("a","b","c", "d", "e")
adjacencyMatrix_g2 <- matrix(data = c(0,1,0,1,0,1,1,2,0,0,0,2,0,1,3,1,0,1,0,1,0,0,3,1,0), nrow = 5, byrow = T)
colnames(adjacencyMatrix_g2) = rownames(adjacencyMatrix_g2) = vertices_g2
print(adjacencyMatrix_g2)
g2 <- graph_from_adjacency_matrix(adjacencyMatrix_g2, mode = "undirected")
plot(g2)
adjacencyMatrix_g4 <- matrix(data = c(1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,1,1,0,0,0,1,0,1,2,0,0,0,0,1,0,0,1,0,0), nrow = 10, byrow = T)
adjacencyMatrix_g4 <- matrix(data = c(1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,1,1,0,0,0,1,0,1,2,0,0,0,0,1,0,0,1,0,0,2,1,3,0,2), nrow = 10, byrow = T)
colnames(adjacencyMatrix_g4) = rownames(adjacencyMatrix_g4) = vertices_g4
print(adjacencyMatrix_g4)
g4 <- graph_from_adjacency_matrix(adjacencyMatrix_g4, mode = "undirected")
plot(g4)
vertices_g4 <- c("a","b","c", "d", "e", "f", "g", "h", "i", "j")
adjacencyMatrix_g4 <- matrix(data = c(1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,1,1,0,0,0,1,0,1,2,0,0,0,0,1,0,0,1,0,0,2,1,3,0,2), nrow = 10, byrow = T)
colnames(adjacencyMatrix_g4) = rownames(adjacencyMatrix_g4) = vertices_g4
print(adjacencyMatrix_g4)
g4 <- graph_from_adjacency_matrix(adjacencyMatrix_g4, mode = "undirected")
plot(g4)
adjacencyMatrix_g4 <- matrix(data = c(1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,1,1,0,0,0,1,0,1,2,0,0,0,0,1,0,0,1,0,0,2,1,3,0,2,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,1,1,0,0,0,1,0,1,2,0,0,0,0,1,0,0,1,0,0,2,1,3,0,2,1,0,1,0,1,0,0,1,1,0,0,0,1,0,1,2,0,0,0,0,1,0,0,1,0,0,2,1,3,0,2), nrow = 10, byrow = T)
adjacencyMatrix_g4 <- matrix(data = c(1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,1,1,0,0,0,1,0,1,2,0,0,0,0,1,0,0,1,0,0,2,1,3,0,2,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,1,1,0,0,0,1,0,1,2,0,0,0,0,1,0,0,1,0,0,2,1,3,0,2,1,0,1,0,1,0,0,1,1,0,0,0,1,0,1,2,0,0,0,0,1,0,0,1), nrow = 10, byrow = T)
adjacencyMatrix_g4 <- matrix(data = c(1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,1,1,0,0,0,1,0,1,2,0,0,0,0,1,0,0,1,0,0,2,1,3,0,2,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,1,1,0,0,0,1,0,1,2,0,0,0,0,1,0,0,1,0,0,2,1,3,0,2,1,0,1,0,1,0,0,1,1,0,0,0,1,0,1,2,0,0,0,0), nrow = 10, byrow = T)
colnames(adjacencyMatrix_g4) = rownames(adjacencyMatrix_g4) = vertices_g4
print(adjacencyMatrix_g4)
g4 <- graph_from_adjacency_matrix(adjacencyMatrix_g4, mode = "undirected")
plot(g4)
g1-g4
g1-g3
g1-g2
vertices_g3 <- c("a","b","c", "d", "e")
adjacencyMatrix_g3 <- matrix(data = c(0,1,0,1,0,0,1,1,0,0,0,1,0,1,2,0,0,0,0,1,0,0,1,0,0), nrow = 5, byrow = T)
colnames(adjacencyMatrix_g3) = rownames(adjacencyMatrix_g3) = vertices_g3
print(adjacencyMatrix_g3)
vertices_g4 <- c("a","b","c", "d", "e", "f", "g", "h", "i", "j")
adjacencyMatrix_g4 <- matrix(data = c(1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,1,1,0,0,0,1,0,1,2,0,0,0,0,1,0,0,1,0,0,2,1,3,0,2,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,0,1,1,0,0,0,1,0,1,2,0,0,0,0,1,0,0,1,0,0,2,1,3,0,2,1,0,1,0,1,0,0,1,1,0,0,0,1,0,1,2,0,0,0,0), nrow = 10, byrow = T)
colnames(adjacencyMatrix_g4) = rownames(adjacencyMatrix_g4) = vertices_g4
print(adjacencyMatrix_g4)
vertices_g2 <- c("a","b","c", "d", "e")
adjacencyMatrix_g2 <- matrix(data = c(0,1,0,1,0,1,1,2,0,0,0,2,0,1,3,1,0,1,0,1,0,0,3,1,0), nrow = 5, byrow = T)
colnames(adjacencyMatrix_g2) = rownames(adjacencyMatrix_g2) = vertices_g2
print(adjacencyMatrix_g2)
g2 <- graph_from_adjacency_matrix(adjacencyMatrix_g2, mode = "undirected")
plot(g2)
which_loop(g1)
which_loop(g2)
which_loop(g3)
which_loop(g4)
g <- barabasi.game(10, m=3, algorithm="bag")
any_multiple(g)
which_multiple(g)
count_multiple(g)
which_multiple(simplify(g))
all(count_multiple(simplify(g)) == 1)
which_multiple(g1)
which_multiple(g2)
which_multiple(g2, dir=FALSE)
which_multiple(g2, dir==FALSE)
which_multiple(g2)
g2
adjacent_vertices(g2)
as_adj_list(g2, mode = c("all", "out", "in", "total"))
plot(g2)
as_adj_list(g21, mode = c("all", "out", "in", "total"))
as_adj_list(g1, mode = c("all", "out", "in", "total"))
plot(g1)
#alle
as_adj_list(g3, mode = c("all", "out", "in", "total"))
# ---- Welchen Grad besitzt der Knoten c? ----
g1:
as_adj_list(g1, mode = c("c"))
# ---- Welchen Grad besitzt der Knoten c? ----
g1:
as_adj_list(g1["c"], mode = c("all"))
# ---- Welchen Grad besitzt der Knoten c? ----
g1:
as_adj_list(g1, mode = c("all"))
# ---- Welchen Grad besitzt der Knoten c? ----
g1:
as_adj_list(g1, mode = c("all"))
# ---- Welchen Grad besitzt der Knoten c? ----
g1:
as_adj_list(g1, mode = c("all", "out", "in", "total"))
as_adj_list(g1, mode = c("all", "out", "in", "total"))
a
#c
as_adj_list(g2, mode = c("all", "out", "in", "total"))
#alle
as_adj_list(g3, mode = c("all", "out", "in", "total"))
#alle
as_adj_list(g4, mode = c("all", "out", "in", "total"))
# ---- Welche Grad-Verteilung weist der Graph auf? ----
as_adj_list(g1)
as_adj_edge_list(g1)
# ---- Welche Grad-Verteilung weist der Graph auf? ----
as_adjacency_matrix(
g1,
type = c("both", "upper", "lower"),
attr = NULL,
edges = FALSE,
names = TRUE,
sparse = igraph_opt("sparsematrices")
)
as_adj(
g1,
type = c("both", "upper", "lower"),
attr = NULL,
edges = FALSE,
names = TRUE,
sparse = igraph_opt("sparsematrices")
)
as_data_frame(g1, what = c("vertices"))
is.directed(g1)
is.directed(g2)
is.directed(g3)
is.directed(g4)
is.simple(g1)
is.simple(g2)
is.simple(g3)
is.simple(g4)
table(which_loop(g1)) -> FALSE
table(which_loop(g1))["TRUE"] -> FALSE
which_loop(g1) -> FALSE
which_loop(g1)
table(which_loop(g1))["TRUE"]
table(which_loop(g2))["TRUE"]
table(which_loop(g3))["TRUE"]
table(which_loop(g4))["TRUE"]
as_adj_list(g1, mode = c("all", "out", "in", "total"))
as_adj_list(g1, mode = c("all", "out", "in", "total"))
library(data.table)
library(ggplot2)
library(gridExtra)
## Set working directory
setwd("~/github/mpi_dogs/")
## Read in the txt file with dog office and category information
dt.dog_office <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
## Filter out samples where category2 contains "lab" or "nc"
dt.dog_office_filtered <- dt.dog_office[!(grepl("lab", category2, ignore.case = TRUE) |
grepl("nc", category2, ignore.case = TRUE))]
## Read in the tsv file with the quicksand data for all samples
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
## Apply the cap to ReadsDeduped and add a small constant to avoid log scale errors
dt.tax[, ReadsDeduped.cap := pmin(ReadsDeduped, 20000) + 1]
## Merge dt.tax with dt.dog_office_filtered to include category information
dt.tax_filtered <- merge(dt.tax, dt.dog_office_filtered[, .(sample_id, category, category2)], by="sample_id", all.x=TRUE)
## Filter for only Hominidae and Canidae families
relevant_families <- c('Hominidae', 'Canidae')
dt.tax_filtered <- dt.tax_filtered[Family %in% relevant_families]
## Add wall information, treating empty categories as "No Wall"
dt.tax_filtered[, `:=`(
is_wall = ifelse(category == "wall", "Wall", "No Wall")
)]
dt.tax_filtered[is.na(is_wall) | is_wall == "", is_wall := "No Wall"]
## Function to create boxplot without jitter (log scale)
create_boxplot <- function(data, title) {
ggplot(data, aes(x = is_wall, y = ReadsDeduped.cap, fill = Family)) +
geom_boxplot(position = position_dodge(width = 0.8), width = 0.7, alpha = 0.7) +
stat_summary(fun = median, geom = "point", shape = 18, size = 3, color = "black", position = position_dodge(width = 0.8)) +
=======
# 88:            88 negative_sample_gr4                <NA>          <NA>    NA
offices_to_exclude <- c("NC", "Mimi/Linda Hallway", "Tracy/Silke Hallway", "Main Entrance")
## Filter out the excluded offices
dt.tax_filtered <- dt.tax_filtered[!office %in% offices_to_exclude]
## List the included offices
dt.tax_filtered[, .N, office]
dt.tax_filtered[is.na(office)]
## Define custom color scheme
custom_colors <- c("Canidae" = "#35978f", "Hominidae" = "#fed976")
## Function to create a single boxplot with custom colors
create_single_boxplot <- function(data, title, x_label) {
ggplot(data, aes(x = is_wall, y = ReadsDeduped + 1, fill = Family)) +
geom_boxplot(width = 0.7, alpha = 0.7) +
stat_summary(fun = median, geom = "point", shape = 18, size = 3, color = "black") +
>>>>>>> bf9910a36297a1073f2b89f3fc52c3125868e694
scale_y_log10(labels = scales::comma) +
scale_fill_manual(values = custom_colors) +
theme_bw() +
labs(title = title, x = x_label, y = "ReadsDeduped (log10 scale)")
r.w <- data[is_wall == 'Wall', mean(ReadsDeduped)]
r.o <- data[is_wall == 'No Wall', mean(ReadsDeduped)]
cat('Avg  wall reads:', r.w, '\n')
cat('Avg !wall reads:', r.o, '\n')
cat('Ratio:', r.w/r.o, '\n')
}
<<<<<<< HEAD
## Function to create boxplot with jitter (log scale)
create_boxplot_with_jitter <- function(data, title) {
ggplot(data, aes(x = is_wall, y = ReadsDeduped.cap, fill = Family)) +
geom_boxplot(position = position_dodge(width = 0.8), width = 0.7, alpha = 0.7, outlier.shape = NA) +
geom_jitter(aes(color = Family), position = position_jitterdodge(dodge.width = 0.8, jitter.width = 0.2), alpha = 0.5) +
stat_summary(fun = median, geom = "point", shape = 18, size = 3, color = "black", position = position_dodge(width = 0.8)) +
scale_y_log10(labels = scales::comma) +
theme_minimal() +
labs(title = title, x = "Sample Location", y = "ReadsDeduped (capped, log10 scale)") +
theme(legend.position = "bottom")
}
## Create plots without jitter
plot_dog_office <- create_boxplot(dt.tax_filtered[category2 == "dog_office"], "Dog Office: Wall vs No Wall")
plot_non_dog_office <- create_boxplot(dt.tax_filtered[category2 != "dog_office"], "Non-Dog Office: Wall vs No Wall")
## Combine plots without jitter
combined_plot_no_jitter <- grid.arrange(plot_dog_office, plot_non_dog_office, ncol = 2)
## Save combined plot without jitter
ggsave("figures/walls_vs_no_walls.png", combined_plot_no_jitter, width = 16, height = 8)
## Save combined plot without jitter
ggsave("figures/walls_vs_no_walls_without_lab.png", combined_plot_no_jitter, width = 16, height = 8)
## Create plots with jitter
plot_dog_office_jitter <- create_boxplot_with_jitter(dt.tax_filtered[category2 == "dog_office"], "Dog Office: Wall vs No Wall")
plot_non_dog_office_jitter <- create_boxplot_with_jitter(dt.tax_filtered[category2 != "dog_office"], "Non-Dog Office: Wall vs No Wall")
## Combine plots with jitter
combined_plot_with_jitter <- grid.arrange(plot_dog_office_jitter, plot_non_dog_office_jitter, ncol = 2)
## Save combined plot with jitter
ggsave("figures/walls_vs_no_walls_with_jitter_without_lab.png", combined_plot_with_jitter, width = 16, height = 8)
library(data.table)
library(ggplot2)
library(gridExtra)
=======
## Creating the four separate plots
plot_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Canidae"],
"Dog Office: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Hominidae"],
"Dog Office: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Canidae"],
"Non-Dog Location: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae"],
"Non-Dog Location: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
## Combine plots
combined_plots <- plot_grid(
plot_dog_office_canidae,
plot_non_dog_office_canidae,
plot_dog_office_hominidae,
plot_non_dog_office_hominidae,
ncol = 2
)
print(combined_plots)
## Saving the combined plot
ggsave("figures/walls_vs_no_walls.png", combined_plots, width = 16, height = 16)
## T-Test
# Data walls vs not wall
wall_data <- dt.tax_filtered[is_wall == "Wall", ReadsDeduped]
no_wall_data <- dt.tax_filtered[is_wall == "No Wall", ReadsDeduped]
t_test_result <- t.test(wall_data, no_wall_data)
print(t_test_result)
wall_data_Canidae_dogoffice <- dt.tax_filtered[is_wall == "Wall", ReadsDeduped, category2 = "dog_office" & Family == "Canidae" ]
wall_data_Canidae_dogoffice <- dt.tax_filtered[ category2 = "dog_office" & Family == "Canidae" & is_wall == "Wall", ReadsDeduped]
wall_data_Canidae_dogoffice <- dt.tax_filtered[ category2 == "dog_office" & Family == "Canidae" & is_wall == "Wall", ReadsDeduped]
#dog office dogs
canidae_dog_office_wall <- dt.tax_filtered[category2 == "dog_office" & Family == "Canidae" & is_wall == "Wall", ReadsDeduped]
canidae_dog_office_no_wall <- dt.tax_filtered[category2 == "dog_office" & Family == "Canidae" & is_wall == "No Wall", ReadsDeduped]
#dog office human
hominidae_dog_office_wall <- dt.tax_filtered[category2 == "dog_office" & Family == "Hominidae" & is_wall == "Wall", ReadsDeduped]
hominidae_dog_office_no_wall <- dt.tax_filtered[category2 == "dog_office" & Family == "Hominidae" & is_wall == "No Wall", ReadsDeduped]
#not dog office dog
canidae_non_dog_office_wall <- dt.tax_filtered[category2 != "dog_office" & Family == "Canidae" & is_wall == "Wall", ReadsDeduped]
canidae_non_dog_office_no_wall <- dt.tax_filtered[category2 != "dog_office" & Family == "Canidae" & is_wall == "No Wall", ReadsDeduped]
#not dog office human
hominidae_non_dog_office_wall <- dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae" & is_wall == "Wall", ReadsDeduped]
hominidae_non_dog_office_no_wall <- dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae" & is_wall == "No Wall", ReadsDeduped]
#t-test for each groupe
t_test_canidae_dog_office <- t.test(canidae_dog_office_wall, canidae_dog_office_no_wall)
t_test_hominidae_dog_office <- t.test(hominidae_dog_office_wall, hominidae_dog_office_no_wall)
t_test_canidae_non_dog_office <- t.test(canidae_non_dog_office_wall, canidae_non_dog_office_no_wall)
t_test_hominidae_non_dog_office <- t.test(hominidae_non_dog_office_wall, hominidae_non_dog_office_no_wall)
print(t_test_canidae_dog_office)
print(t_test_hominidae_dog_office)
print(t_test_canidae_non_dog_office)
print(t_test_hominidae_non_dog_office)
print(combined_plots)
library(data.table)
library(ggplot2)
library(gridExtra)
library(cowplot)
## Set working directory
setwd("~/github/mpi_dogs/")
## Read in the txt file with dog office and category information
dt.dog_office <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
## Read in the tsv file with the quicksand data for all samples
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
## Merge dt.tax with dt.dog_office to include category information
dt.tax_filtered <- merge(dt.tax, dt.dog_office[, .(sample_id, category, category2, office)], by="sample_id", all.x=TRUE)
## Filter for only Hominidae and Canidae families
relevant_families <- c('Hominidae', 'Canidae')
dt.tax_filtered <- dt.tax_filtered[Family %in% relevant_families]
## Add wall information, treating empty categories as "No Wall"
dt.tax_filtered[, is_wall := ifelse(category == "wall", "Wall", "No Wall")]
dt.tax_filtered[is.na(is_wall) | is_wall == "", is_wall := "No Wall"]
dt.tax_filtered[, .N, category]
## Define offices to exclude
## also, the negative samples aren't all in NC?
#     sample_number           sample_id              office office_number     x
# 85:            85 negative_sample_gr1                <NA>          <NA>    NA
# 86:            86 negative_sample_gr2                <NA>          <NA>    NA
# 87:            87 negative_sample_gr3                <NA>          <NA>    NA
# 88:            88 negative_sample_gr4                <NA>          <NA>    NA
offices_to_exclude <- c("NC", "Mimi/Linda Hallway", "Tracy/Silke Hallway", "Main Entrance")
## Filter out the excluded offices
dt.tax_filtered <- dt.tax_filtered[!office %in% offices_to_exclude]
## List the included offices
dt.tax_filtered[, .N, office]
dt.tax_filtered[is.na(office)]
## Define custom color scheme
custom_colors <- c("Canidae" = "#35978f", "Hominidae" = "#fed976")
## Function to create a single boxplot with custom colors
create_single_boxplot <- function(data, title, x_label) {
ggplot(data, aes(x = is_wall, y = ReadsDeduped + 1, fill = Family)) +
geom_boxplot(width = 0.7, alpha = 0.7) +
stat_summary(fun = median, geom = "point", shape = 18, size = 3, color = "black") +
scale_y_log10(labels = scales::comma) +
scale_fill_manual(values = custom_colors) +
theme_bw() +
labs(title = title, x = x_label, y = "ReadsDeduped (log10 scale)")
r.w <- data[is_wall == 'Wall', mean(ReadsDeduped)]
r.o <- data[is_wall == 'No Wall', mean(ReadsDeduped)]
cat('Avg  wall reads:', r.w, '\n')
cat('Avg !wall reads:', r.o, '\n')
cat('Ratio:', r.w/r.o, '\n')
}
## Creating the four separate plots
plot_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Canidae"],
"Dog Office: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Hominidae"],
"Dog Office: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Canidae"],
"Non-Dog Location: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae"],
"Non-Dog Location: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
## Combine plots
combined_plots <- plot_grid(
plot_dog_office_canidae,
plot_non_dog_office_canidae,
plot_dog_office_hominidae,
plot_non_dog_office_hominidae,
ncol = 2
)
print(combined_plots)
print(combined_plots)
plot_non_dog_office_hominidae
## Creating the four separate plots
plot_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Canidae"],
"Dog Office: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Hominidae"],
"Dog Office: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Canidae"],
"Non-Dog Location: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae"],
"Non-Dog Location: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
library(data.table)
library(ggplot2)
library(gridExtra)
library(cowplot)
>>>>>>> bf9910a36297a1073f2b89f3fc52c3125868e694
## Set working directory
setwd("~/github/mpi_dogs/")
## Read in the txt file with dog office and category information
dt.dog_office <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
## Read in the tsv file with the quicksand data for all samples
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
<<<<<<< HEAD
## Apply the cap to ReadsDeduped and add a small constant to avoid log scale errors
dt.tax[, ReadsDeduped.cap := pmin(ReadsDeduped, 20000) + 1]
## Merge dt.tax with dt.dog_office to include category information
dt.tax_filtered <- merge(dt.tax, dt.dog_office[, .(sample_id, category, category2)], by="sample_id", all.x=TRUE)
=======
## Merge dt.tax with dt.dog_office to include category information
dt.tax_filtered <- merge(dt.tax, dt.dog_office[, .(sample_id, category, category2, office)], by="sample_id", all.x=TRUE)
>>>>>>> bf9910a36297a1073f2b89f3fc52c3125868e694
## Filter for only Hominidae and Canidae families
relevant_families <- c('Hominidae', 'Canidae')
dt.tax_filtered <- dt.tax_filtered[Family %in% relevant_families]
## Add wall information, treating empty categories as "No Wall"
<<<<<<< HEAD
dt.tax_filtered[, `:=`(
is_wall = ifelse(category == "wall", "Wall", "No Wall")
)]
dt.tax_filtered[is.na(is_wall) | is_wall == "", is_wall := "No Wall"]
## Function to create boxplot without jitter (log scale)
create_boxplot <- function(data, title) {
ggplot(data, aes(x = is_wall, y = ReadsDeduped.cap, fill = Family)) +
geom_boxplot(position = position_dodge(width = 0.8), width = 0.7, alpha = 0.7) +
stat_summary(fun = median, geom = "point", shape = 18, size = 3, color = "black", position = position_dodge(width = 0.8)) +
scale_y_log10(labels = scales::comma) +
theme_minimal() +
labs(title = title, x = "Sample Location", y = "ReadsDeduped (capped, log10 scale)") +
theme(legend.position = "bottom")
}
## Function to create boxplot with jitter (log scale)
create_boxplot_with_jitter <- function(data, title) {
ggplot(data, aes(x = is_wall, y = ReadsDeduped.cap, fill = Family)) +
geom_boxplot(position = position_dodge(width = 0.8), width = 0.7, alpha = 0.7, outlier.shape = NA) +
geom_jitter(aes(color = Family), position = position_jitterdodge(dodge.width = 0.8, jitter.width = 0.2), alpha = 0.5) +
stat_summary(fun = median, geom = "point", shape = 18, size = 3, color = "black", position = position_dodge(width = 0.8)) +
scale_y_log10(labels = scales::comma) +
theme_minimal() +
labs(title = title, x = "Sample Location", y = "ReadsDeduped (capped, log10 scale)") +
theme(legend.position = "bottom")
}
## Create plots without jitter
plot_dog_office <- create_boxplot(dt.tax_filtered[category2 == "dog_office"], "Dog Office: Wall vs No Wall")
plot_non_dog_office <- create_boxplot(dt.tax_filtered[category2 != "dog_office"], "Non-Dog Office: Wall vs No Wall")
## Combine plots without jitter
combined_plot_no_jitter <- grid.arrange(plot_dog_office, plot_non_dog_office, ncol = 2)
## Save combined plot without jitter
ggsave("figures/walls_vs_no_walls.png", combined_plot_no_jitter, width = 16, height = 8)
## Create plots with jitter
plot_dog_office_jitter <- create_boxplot_with_jitter(dt.tax_filtered[category2 == "dog_office"], "Dog Office: Wall vs No Wall")
plot_non_dog_office_jitter <- create_boxplot_with_jitter(dt.tax_filtered[category2 != "dog_office"], "Non-Dog Office: Wall vs No Wall")
## Combine plots with jitter
combined_plot_with_jitter <- grid.arrange(plot_dog_office_jitter, plot_non_dog_office_jitter, ncol = 2)
## Save combined plot with jitter
ggsave("figures/walls_vs_no_walls_with_jitter.png", combined_plot_with_jitter, width = 16, height = 8)
=======
dt.tax_filtered[, is_wall := ifelse(category == "wall", "Wall", "No Wall")]
dt.tax_filtered[is.na(is_wall) | is_wall == "", is_wall := "No Wall"]
dt.tax_filtered[, .N, category]
## Define offices to exclude
## also, the negative samples aren't all in NC?
#     sample_number           sample_id              office office_number     x
# 85:            85 negative_sample_gr1                <NA>          <NA>    NA
# 86:            86 negative_sample_gr2                <NA>          <NA>    NA
# 87:            87 negative_sample_gr3                <NA>          <NA>    NA
# 88:            88 negative_sample_gr4                <NA>          <NA>    NA
offices_to_exclude <- c("NC", "Mimi/Linda Hallway", "Tracy/Silke Hallway", "Main Entrance")
## Filter out the excluded offices
dt.tax_filtered <- dt.tax_filtered[!office %in% offices_to_exclude]
## List the included offices
dt.tax_filtered[, .N, office]
dt.tax_filtered[is.na(office)]
## Define custom color scheme
custom_colors <- c("Canidae" = "#35978f", "Hominidae" = "#fed976")
## Function to create a single boxplot with custom colors
create_single_boxplot <- function(data, title, x_label) {
ggplot(data, aes(x = is_wall, y = ReadsDeduped + 1, fill = Family)) +
geom_boxplot(width = 0.7, alpha = 0.7) +
stat_summary(fun = median, geom = "point", shape = 18, size = 3, color = "black") +
scale_y_log10(labels = scales::comma) +
scale_fill_manual(values = custom_colors) +
theme_bw() +
labs(title = title, x = x_label, y = "ReadsDeduped (log10 scale)")
r.w <- data[is_wall == 'Wall', mean(ReadsDeduped)]
r.o <- data[is_wall == 'No Wall', mean(ReadsDeduped)]
cat('Avg  wall reads:', r.w, '\n')
cat('Avg !wall reads:', r.o, '\n')
cat('Ratio:', r.w/r.o, '\n')
}
## Creating the four separate plots
plot_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Canidae"],
"Dog Office: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Hominidae"],
"Dog Office: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Canidae"],
"Non-Dog Location: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae"],
"Non-Dog Location: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
## Filter out the excluded offices
dt.tax_filtered <- dt.tax_filtered[!office %in% offices_to_exclude]
## List the included offices
dt.tax_filtered[, .N, office]
dt.tax_filtered[is.na(office)]
## Define custom color scheme
custom_colors <- c("Canidae" = "#35978f", "Hominidae" = "#fed976")
## List the included offices
dt.tax_filtered[, .N, office]
dt.tax_filtered[is.na(office)]
## Function to create a single boxplot with custom colors
create_single_boxplot <- function(data, title, x_label) {
ggplot(data, aes(x = is_wall, y = ReadsDeduped + 1, fill = Family)) +
geom_boxplot(width = 0.7, alpha = 0.7) +
stat_summary(fun = median, geom = "point", shape = 18, size = 3, color = "black") +
scale_y_log10(labels = scales::comma) +
scale_fill_manual(values = custom_colors) +
theme_bw() +
labs(title = title, x = x_label, y = "ReadsDeduped (log10 scale)")
r.w <- data[is_wall == 'Wall', mean(ReadsDeduped)]
r.o <- data[is_wall == 'No Wall', mean(ReadsDeduped)]
cat('Avg  wall reads:', r.w, '\n')
cat('Avg !wall reads:', r.o, '\n')
cat('Ratio:', r.w/r.o, '\n')
}
create_single_boxplot
## Creating the four separate plots
plot_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Canidae"],
"Dog Office: Canidae",
"Sample Location"
) + theme(legend.position = "none")
print(combined_plots)
## Combine plots
combined_plots <- plot_grid(
plot_dog_office_canidae,
plot_non_dog_office_canidae,
plot_dog_office_hominidae,
plot_non_dog_office_hominidae,
ncol = 2
)
print(combined_plots)
## Combine plots
dev.new()
combined_plots <- plot_grid(
plot_dog_office_canidae,
plot_non_dog_office_canidae,
plot_dog_office_hominidae,
plot_non_dog_office_hominidae,
ncol = 2
)
print(combined_plots)
## Saving the combined plot
ggsave("figures/walls_vs_no_walls.png", combined_plots, width = 16, height = 16)
## Function to create a single boxplot with custom colors
create_single_boxplot <- function(data, title, x_label) {
p <- ggplot(data, aes(x = is_wall, y = ReadsDeduped + 1, fill = Family)) +
geom_boxplot(width = 0.7, alpha = 0.7) +
stat_summary(fun = median, geom = "point", shape = 18, size = 3, color = "black") +
scale_y_log10(labels = scales::comma) +
scale_fill_manual(values = custom_colors) +
theme_bw() +
labs(title = title, x = x_label, y = "ReadsDeduped (log10 scale)")
r.w <- data[is_wall == 'Wall', mean(ReadsDeduped)]
r.o <- data[is_wall == 'No Wall', mean(ReadsDeduped)]
cat('Avg  wall reads:', r.w, '\n')
cat('Avg !wall reads:', r.o, '\n')
cat('Ratio:', r.w/r.o, '\n')
return(p)  # Explicitly return the plot object
}
## Creating the four separate plots
plot_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Canidae"],
"Dog Office: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Hominidae"],
"Dog Office: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Canidae"],
"Non-Dog Location: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae"],
"Non-Dog Location: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
## Combine plots
combined_plots <- plot_grid(
plot_dog_office_canidae,
plot_non_dog_office_canidae,
plot_dog_office_hominidae,
plot_non_dog_office_hominidae,
ncol = 2
)
print(combined_plots)
return(p)
## Creating the four separate plots
plot_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Canidae"],
"Dog Office: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Hominidae"],
"Dog Office: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Canidae"],
"Non-Dog Location: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae"],
"Non-Dog Location: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
## Combine plots
combined_plots <- plot_grid(
plot_dog_office_canidae,
plot_non_dog_office_canidae,
plot_dog_office_hominidae,
plot_non_dog_office_hominidae,
ncol = 2
)
print(combined_plots)
plot_non_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae"],
"Non-Dog Location: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
## Combine plots
combined_plots <- plot_grid(
plot_dog_office_canidae,
plot_non_dog_office_canidae,
plot_dog_office_hominidae,
plot_non_dog_office_hominidae,
ncol = 2
)
library(data.table)
library(ggplot2)
library(gridExtra)
library(cowplot)
## Set working directory
setwd("~/github/mpi_dogs/")
## Read in the txt file with dog office and category information
dt.dog_office <- fread('data/dog_samples/R_prep/dog_env_samples_24_v1.txt', na.strings = c('-','NA',''))
## Read in the tsv file with the quicksand data for all samples
dt.tax <- fread('data/env_samples/quicksand.v2/final_report.tsv', na.strings = c('-','NA',''))
## Merge dt.tax with dt.dog_office to include category information
dt.tax_filtered <- merge(dt.tax, dt.dog_office[, .(sample_id, category, category2, office)], by="sample_id", all.x=TRUE)
## Filter for only Hominidae and Canidae families
relevant_families <- c('Hominidae', 'Canidae')
dt.tax_filtered <- dt.tax_filtered[Family %in% relevant_families]
## Add wall information, treating empty categories as "No Wall"
dt.tax_filtered[, is_wall := ifelse(category == "wall", "Wall", "No Wall")]
dt.tax_filtered[is.na(is_wall) | is_wall == "", is_wall := "No Wall"]
dt.tax_filtered[, .N, category]
## Define offices to exclude
## also, the negative samples aren't all in NC?
#     sample_number           sample_id              office office_number     x
# 85:            85 negative_sample_gr1                <NA>          <NA>    NA
# 86:            86 negative_sample_gr2                <NA>          <NA>    NA
# 87:            87 negative_sample_gr3                <NA>          <NA>    NA
# 88:            88 negative_sample_gr4                <NA>          <NA>    NA
offices_to_exclude <- c("NC", "Mimi/Linda Hallway", "Tracy/Silke Hallway", "Main Entrance")
## Filter out the excluded offices
dt.tax_filtered <- dt.tax_filtered[!office %in% offices_to_exclude]
## List the included offices
dt.tax_filtered[, .N, office]
dt.tax_filtered[is.na(office)]
## Define custom color scheme
custom_colors <- c("Canidae" = "#35978f", "Hominidae" = "#fed976")
## Function to create a single boxplot with custom colors
create_single_boxplot <- function(data, title, x_label) {
p <- ggplot(data, aes(x = is_wall, y = ReadsDeduped + 1, fill = Family)) +
geom_boxplot(width = 0.7, alpha = 0.7) +
stat_summary(fun = median, geom = "point", shape = 18, size = 3, color = "black") +
scale_y_log10(labels = scales::comma) +
scale_fill_manual(values = custom_colors) +
theme_bw() +
labs(title = title, x = x_label, y = "ReadsDeduped (log10 scale)")
r.w <- data[is_wall == 'Wall', mean(ReadsDeduped)]
r.o <- data[is_wall == 'No Wall', mean(ReadsDeduped)]
cat('Avg  wall reads:', r.w, '\n')
cat('Avg !wall reads:', r.o, '\n')
cat('Ratio:', r.w/r.o, '\n')
return(p)
}
## Creating the four separate plots
plot_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Canidae"],
"Dog Office: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 == "dog_office" & Family == "Hominidae"],
"Dog Office: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_canidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Canidae"],
"Non-Dog Location: Canidae",
"Sample Location"
) + theme(legend.position = "none")
plot_non_dog_office_hominidae <- create_single_boxplot(
dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae"],
"Non-Dog Location: Hominidae",
"Sample Location"
) + theme(legend.position = "none")
## Combine plots
combined_plots <- plot_grid(
plot_dog_office_canidae,
plot_non_dog_office_canidae,
plot_dog_office_hominidae,
plot_non_dog_office_hominidae,
ncol = 2
)
print(combined_plots)
## Saving the combined plot
ggsave("figures/walls_vs_no_walls.png", combined_plots, width = 16, height = 16)
## T-Test
# Data walls vs not wall
wall_data <- dt.tax_filtered[is_wall == "Wall", ReadsDeduped]
no_wall_data <- dt.tax_filtered[is_wall == "No Wall", ReadsDeduped]
t_test_result <- t.test(wall_data, no_wall_data)
print(t_test_result)
#dog office dogs
canidae_dog_office_wall <- dt.tax_filtered[category2 == "dog_office" & Family == "Canidae" & is_wall == "Wall", ReadsDeduped]
canidae_dog_office_no_wall <- dt.tax_filtered[category2 == "dog_office" & Family == "Canidae" & is_wall == "No Wall", ReadsDeduped]
#dog office human
hominidae_dog_office_wall <- dt.tax_filtered[category2 == "dog_office" & Family == "Hominidae" & is_wall == "Wall", ReadsDeduped]
hominidae_dog_office_no_wall <- dt.tax_filtered[category2 == "dog_office" & Family == "Hominidae" & is_wall == "No Wall", ReadsDeduped]
#not dog office dog
canidae_non_dog_office_wall <- dt.tax_filtered[category2 != "dog_office" & Family == "Canidae" & is_wall == "Wall", ReadsDeduped]
canidae_non_dog_office_no_wall <- dt.tax_filtered[category2 != "dog_office" & Family == "Canidae" & is_wall == "No Wall", ReadsDeduped]
#not dog office human
hominidae_non_dog_office_wall <- dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae" & is_wall == "Wall", ReadsDeduped]
hominidae_non_dog_office_no_wall <- dt.tax_filtered[category2 != "dog_office" & Family == "Hominidae" & is_wall == "No Wall", ReadsDeduped]
#t-test for each groupe
t_test_canidae_dog_office <- t.test(canidae_dog_office_wall, canidae_dog_office_no_wall)
t_test_hominidae_dog_office <- t.test(hominidae_dog_office_wall, hominidae_dog_office_no_wall)
t_test_canidae_non_dog_office <- t.test(canidae_non_dog_office_wall, canidae_non_dog_office_no_wall)
t_test_hominidae_non_dog_office <- t.test(hominidae_non_dog_office_wall, hominidae_non_dog_office_no_wall)
print(t_test_canidae_dog_office)
print(t_test_hominidae_dog_office)
print(t_test_canidae_non_dog_office)
print(t_test_hominidae_non_dog_office)
>>>>>>> bf9910a36297a1073f2b89f3fc52c3125868e694
